import ast
import math
from collections.abc import Generator
from typing import Any

eval_debug: Any
strTypes: Any
isPy39: Any
haveNameConstant: Any

class BadCode(ValueError): ...

augOps: Any
__allowed_magic_methods__: Any
__rl_unsafe__: Any
__rl_unsafe_re__: Any

def copy_locations(new_node, old_node) -> None: ...

class UntrustedAstTransformer(ast.NodeTransformer):
    names_seen: Any
    nameIsAllowed: Any
    _tmp_idx: int
    _tmp_pfx: Any
    def __init__(
        self, names_seen: Any | None = ..., nameIsAllowed: Any | None = ...
    ) -> None: ...
    @property
    def tmpName(self): ...
    def error(self, node, msg) -> None: ...
    def guard_iter(self, node): ...
    def is_starred(self, ob): ...
    def gen_unpack_spec(self, tpl): ...
    def protect_unpack_sequence(self, target, value): ...
    def gen_unpack_wrapper(self, node, target, ctx: str = ...): ...
    def gen_none_node(self): ...
    def gen_lambda(self, args, body): ...
    def gen_del_stmt(self, name_to_del): ...
    def transform_slice(self, slice_): ...
    def isAllowedName(self, node, name) -> None: ...
    def check_function_argument_names(self, node) -> None: ...
    def check_import_names(self, node): ...
    def gen_attr_check(self, node, attr_name): ...
    def visit_Constant(self, node): ...
    def visit_Name(self, node): ...
    def visit_Call(self, node): ...
    def visit_Attribute(self, node): ...
    def visit_Subscript(self, node): ...
    def visit_Assign(self, node): ...
    def visit_AugAssign(self, node): ...
    def visit_While(node): ...
    def visit_ExceptHandler(self, node): ...
    def visit_With(self, node): ...
    def visit_FunctionDef(self, node): ...
    def visit_Lambda(self, node): ...
    def visit_ClassDef(self, node): ...
    def visit_Import(self, node): ...
    def visit_BinOp(self, node): ...
    visit_ImportFrom: Any
    visit_For: Any
    visit_comprehension: Any
    def generic_visit(self, node) -> None: ...
    def not_allowed(self, node) -> None: ...
    def visit_children(self, node): ...
    def visit(self, node): ...
    visit_Ellipsis: Any
    visit_MatMult: Any
    visit_Exec: Any
    visit_Nonlocal: Any
    visit_AsyncFunctionDef: Any
    visit_Await: Any
    visit_AsyncFor: Any
    visit_AsyncWith: Any
    visit_Print: Any
    visit_Num: Any
    visit_Str: Any
    visit_Bytes: Any
    visit_List: Any
    visit_Tuple: Any
    visit_Set: Any
    visit_Dict: Any
    visit_FormattedValue: Any
    visit_JoinedStr: Any
    visit_NameConstant: Any
    visit_Load: Any
    visit_Store: Any
    visit_Del: Any
    visit_Starred: Any
    visit_Expression: Any
    visit_Expr: Any
    visit_UnaryOp: Any
    visit_UAdd: Any
    visit_USub: Any
    visit_Not: Any
    visit_Invert: Any
    visit_Add: Any
    visit_Sub: Any
    visit_Mult: Any
    visit_Div: Any
    visit_FloorDiv: Any
    visit_Pow: Any
    visit_Mod: Any
    visit_LShift: Any
    visit_RShift: Any
    visit_BitOr: Any
    visit_BitXor: Any
    visit_BitAnd: Any
    visit_BoolOp: Any
    visit_And: Any
    visit_Or: Any
    visit_Compare: Any
    visit_Eq: Any
    visit_NotEq: Any
    visit_Lt: Any
    visit_LtE: Any
    visit_Gt: Any
    visit_GtE: Any
    visit_Is: Any
    visit_IsNot: Any
    visit_In: Any
    visit_NotIn: Any
    visit_keyword: Any
    visit_IfExp: Any
    visit_Index: Any
    visit_Slice: Any
    visit_ExtSlice: Any
    visit_ListComp: Any
    visit_SetComp: Any
    visit_GeneratorExp: Any
    visit_DictComp: Any
    visit_Raise: Any
    visit_Assert: Any
    visit_Delete: Any
    visit_Pass: Any
    visit_alias: Any
    visit_If: Any
    visit_Break: Any
    visit_Continue: Any
    visit_Try: Any
    visit_TryFinally: Any
    visit_TryExcept: Any
    visit_withitem: Any
    visit_arguments: Any
    visit_arg: Any
    visit_Return: Any
    visit_Yield: Any
    visit_YieldFrom: Any
    visit_Global: Any
    visit_Module: Any
    visit_Param: Any

def astFormat(node): ...

class __rl_SafeIter__:
    __rl_iter__: Any
    __rl_owner__: Any
    def __init__(self, it, owner) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    next: Any

__rl_safe_builtins__: Any

def safer_globals(g: Any | None = ...): ...

math_log10 = math.log10
__rl_undef__: Any

class __RL_SAFE_ENV__:
    __time_time__: Any
    __weakref_ref__: Any
    __slicetype__: Any
    timeout: Any
    allowed_magic_methods: Any
    __rl_gen_range__: Any
    __rl_real_iter__: Any
    __name__: Any
    real_bi: Any
    bi_replace: Any
    __rl_builtins__: Any
    def __init__(
        self, timeout: Any | None = ..., allowed_magic_methods: Any | None = ...
    ): ...
    def __rl_type__(self, *args): ...
    def __rl_check__(self) -> None: ...
    def __rl_sd__(self, obj): ...
    def __rl_getiter__(self, it): ...
    def __rl_max__(self, arg, *args, **kwds): ...
    def __rl_min__(self, arg, *args, **kwds): ...
    def __rl_sum__(self, sequence, start: int = ...): ...
    def __rl_enumerate__(self, seq): ...
    def __rl_zip__(self, *args): ...
    def __rl_hasattr__(self, obj, name): ...
    def __rl_filter__(self, f, seq): ...
    def __rl_map__(self, f, seq): ...
    def __rl_any__(self, seq): ...
    def __rl_all__(self, seq): ...
    def __rl_sorted__(self, seq, **kwds): ...
    def __rl_reversed__(self, seq): ...
    def __rl_range__(self, start, *args): ...
    def __rl_set__(self, it): ...
    def __rl_frozenset__(self, it): ...
    def __rl_iter_unpack_sequence__(
        self, it, spec, _getiter_
    ) -> Generator[Any, None, None]: ...
    def __rl_unpack_sequence__(self, it, spec, _getiter_): ...
    def __rl_is_allowed_name__(self, name) -> None: ...
    def __rl_getattr__(self, obj, a, *args): ...
    def __rl_getitem__(self, obj, a): ...
    __rl_tmax__: int
    __rl_max_len__: int
    __rl_max_pow_digits__: int
    def __rl_add__(self, a, b): ...
    def __rl_mult__(self, a, b): ...
    def __rl_pow__(self, a, b): ...
    def __rl_augAssign__(self, op, v, i): ...
    def __rl_apply__(self, func, args, kwds): ...
    def __rl_args_iter__(self, *args): ...
    def __rl_list__(self, it): ...
    def __rl_compile__(
        self,
        src,
        fname: str = ...,
        mode: str = ...,
        flags: int = ...,
        inherit: bool = ...,
        visit: Any | None = ...,
    ): ...
    __rl_limit__: Any
    def __rl_safe_eval__(
        self,
        expr,
        g,
        l,
        mode,
        timeout: Any | None = ...,
        allowed_magic_methods: Any | None = ...,
        __frame_depth__: int = ...,
    ): ...

class __rl_safe_eval__:
    mode: str
    env: Any
    def __init__(self) -> None: ...
    def __call__(
        self,
        expr,
        g: Any | None = ...,
        l: Any | None = ...,
        timeout: Any | None = ...,
        allowed_magic_methods: Any | None = ...,
    ): ...

class __rl_safe_exec__(__rl_safe_eval__):
    mode: str

rl_safe_exec: Any
rl_safe_eval: Any
