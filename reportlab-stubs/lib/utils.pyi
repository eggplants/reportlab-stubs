import datetime
from collections.abc import Generator
from typing import Any

from reportlab.lib.rltempfile import get_rl_tempdir as get_rl_tempdir
from reportlab.lib.rltempfile import get_rl_tempfile as get_rl_tempfile

from .rl_safe_eval import rl_safe_eval as rl_safe_eval
from .rl_safe_eval import rl_safe_exec as rl_safe_exec
from .rl_safe_eval import safer_globals as safer_globals

__version__: str
__doc__: str

class __UNSET__:
    @staticmethod
    def __bool__(): ...
    @staticmethod
    def __str__(): ...
    __repr__: Any

isPyPy: Any

def isFunction(v): ...

class c:
    def m(self) -> None: ...

def isMethod(v, mt=...): ...
def isModule(v): ...
def isSeq(v, _st=...): ...
def isNative(v): ...

_rl_NoneType: Any
strTypes: Any

def _digester(s): ...
def asBytes(v, enc: str = ...): ...
def asUnicode(v, enc: str = ...): ...
def asUnicodeEx(v, enc: str = ...): ...
def asNative(v, enc: str = ...): ...
def int2Byte(i): ...
def isStr(v): ...
def isBytes(v): ...
def isUnicode(v): ...
def isClass(v): ...
def isNonPrimitiveInstance(x): ...
def instantiated(v): ...
def bytestr(x, enc: str = ...): ...
def encode_label(args): ...
def decode_label(label): ...
def rawUnicode(s): ...
def rawBytes(s): ...

rl_exec: Any

def char2int(s): ...
def rl_reraise(t, v, b: Any | None = ...) -> None: ...
def rl_add_builtins(**kwd) -> None: ...
def zipImported(ldr: Any | None = ...): ...
def _findFiles(dirList, ext: str = ...): ...

class CIDict(dict):
    def __init__(self, *args, **kwds) -> None: ...
    def update(self, D) -> None: ...
    def __setitem__(self, k, v) -> None: ...
    def __getitem__(self, k): ...
    def __delitem__(self, k): ...
    def get(self, k, dv: Any | None = ...): ...
    def __contains__(self, k): ...
    def pop(self, k, *a): ...
    def setdefault(self, k, *a): ...

_KNOWN_MAC_EXT: Any

def markfilename(
    filename, creatorcode: Any | None = ..., filetype: Any | None = ..., ext: str = ...
) -> None: ...

__RL_DIR: Any
_RL_DIR: Any
__file__: Any
__rl_loader__ = __loader__
_isFSD: Any
_archive: Any
_archivepfx: Any
_archivedir: Any
_archivedirpfx: Any
_archivepfxlen: Any
_archivedirpfxlen: Any

def __startswith_rl(
    fn,
    _archivepfx=...,
    _archivedirpfx=...,
    _archive=...,
    _archivedir=...,
    os_path_normpath=...,
    os_path_normcase=...,
    os_getcwd=...,
    os_sep=...,
    os_sep_len=...,
): ...
def _startswith_rl(fn): ...
def rl_glob(pattern, glob=..., fnmatch=..., _RL_DIR=..., pjoin=...): ...

_isFSSD: Any

def isFileSystemDistro(): ...
def isCompactDistro(): ...
def isSourceDistro(): ...
def normalize_path(p): ...

_importlib_invalidate_caches: Any

def recursiveImport(
    modulename, baseDir: Any | None = ..., noCWD: int = ..., debug: int = ...
): ...

haveImages: Any

class ArgvDictValue:
    value: Any
    func: Any
    def __init__(self, value, func) -> None: ...

def getArgvDict(**kw): ...
def getHyphenater(hDict: Any | None = ...): ...
def _className(self): ...
def open_for_read_by_name(name, mode: str = ...): ...
def rlUrlRead(name): ...
def open_for_read(name, mode: str = ...): ...
def open_and_read(name, mode: str = ...): ...
def open_and_readlines(name, mode: str = ...): ...
def rl_isfile(fn, os_path_isfile=...): ...
def rl_isdir(pn, os_path_isdir=..., os_path_normpath=...): ...
def rl_listdir(pn, os_path_isdir=..., os_path_normpath=..., os_listdir=...): ...
def rl_getmtime(
    pn, os_path_isfile=..., os_path_normpath=..., os_path_getmtime=..., time_mktime=...
): ...
def __rl_get_module__(name, dir): ...
def rl_get_module(name, dir): ...
def _isPILImage(im): ...

class ImageReader:
    _cache: Any
    _max_image_size: Any
    __dict__: Any
    _ident: Any
    fileName: Any
    _image: Any
    _width: Any
    _height: Any
    _transparent: Any
    _data: Any
    fp: Any
    __class__: Any
    _dataA: Any
    def __init__(self, fileName, ident: Any | None = ...) -> None: ...
    def identity(self): ...
    def _read_image(self, fp): ...
    @classmethod
    def check_pil_image_size(cls, im) -> None: ...
    @classmethod
    def set_max_image_size(cls, max_image_size: Any | None = ...) -> None: ...
    def _jpeg_fh(self): ...
    def jpeg_fh(self) -> None: ...
    def getSize(self): ...
    mode: Any
    def getRGBData(self): ...
    def getImageData(self): ...
    def getTransparent(self): ...

class LazyImageReader(ImageReader):
    def fp(self): ...
    fp: Any
    def _image(self): ...
    _image: Any

def getImageData(imageFileName): ...

class DebugMemo:
    fn: Any
    stdout: Any
    store: Any
    def __init__(
        self,
        fn: str = ...,
        mode: str = ...,
        getScript: int = ...,
        modules=...,
        capture_traceback: int = ...,
        stdout: Any | None = ...,
        **kw
    ) -> None: ...
    def _add(self, D) -> None: ...
    def add(self, **kw) -> None: ...
    def _dump(self, f) -> None: ...
    def dump(self) -> None: ...
    def dumps(self): ...
    def _load(self, f) -> None: ...
    def load(self) -> None: ...
    def loads(self, s) -> None: ...
    def _show_module_versions(self, k, v) -> None: ...
    def _banner(self, k, what) -> None: ...
    def _start(self, k) -> None: ...
    def _finish(self, k) -> None: ...
    def _show_lines(self, k, v) -> None: ...
    def _show_file(self, k, v) -> None: ...
    def _show_payload(self, k, v) -> None: ...
    def _show_extensions(self) -> None: ...
    specials: Any
    def show(self) -> None: ...
    def payload(self, name): ...
    def __setitem__(self, name, value) -> None: ...
    def __getitem__(self, name): ...
    def _writeln(self, msg) -> None: ...

def _flatten(L, a) -> None: ...
def flatten(L): ...
def find_locals(func, depth: int = ...): ...

class _FmtSelfDict:
    obj: Any
    _overrideArgs: Any
    def __init__(self, obj, overrideArgs) -> None: ...
    def __getitem__(self, k): ...

class FmtSelfDict:
    def _fmt(self, fmt, **overrideArgs): ...

def _simpleSplit(txt, mW, SW): ...
def simpleSplit(text, fontName, fontSize, maxWidth): ...
def escapeTextOnce(text): ...
def fileName2FSEnc(fn): ...
def prev_this_next(items): ...
def commasplit(s): ...
def commajoin(l): ...
def findInPaths(fn, paths, isfile: bool = ..., fail: bool = ...): ...
def annotateException(
    msg, enc: str = ..., postMsg: str = ..., sep: str = ...
) -> None: ...
def escapeOnce(data): ...

class IdentStr(str):
    __inc: Any
    def __new__(cls, value): ...

class RLString(str):
    def __new__(cls, v, **kwds): ...

def makeFileName(s): ...

class FixedOffsetTZ(datetime.tzinfo):
    __offset: Any
    __name: Any
    def __init__(self, h, m, name) -> None: ...
    def utcoffset(self, dt): ...
    def tzname(self, dt): ...
    def dst(self, dt): ...

class TimeStamp:
    tzname: str
    t: Any
    lt: Any
    YMDhms: Any
    dhh: Any
    dmm: Any
    def __init__(self, invariant: Any | None = ...) -> None: ...
    @property
    def datetime(self): ...
    @property
    def asctime(self): ...

def recursiveGetAttr(obj, name, g: Any | None = ...): ...
def recursiveSetAttr(obj, name, value) -> None: ...
def recursiveDelAttr(obj, name) -> None: ...
def yieldNoneSplits(L) -> Generator[Any, None, None]: ...
