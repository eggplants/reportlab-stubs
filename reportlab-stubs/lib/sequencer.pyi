from typing import Any

class _Counter:
    _base: int
    _value: Any
    _formatter: Any
    _resets: Any
    def __init__(self) -> None: ...
    def setFormatter(self, formatFunc) -> None: ...
    def reset(self, value: Any | None = ...) -> None: ...
    def next(self): ...
    __next__: Any
    def _this(self): ...
    def nextf(self): ...
    def thisf(self): ...
    def chain(self, otherCounter) -> None: ...

class Sequencer:
    _counters: Any
    _formatters: Any
    def __init__(self) -> None: ...
    _defaultCounter: Any
    def _reset(self) -> None: ...
    def _getCounter(self, counter: Any | None = ...): ...
    def _this(self, counter: Any | None = ...): ...
    def __next__(self): ...
    def next(self, counter: Any | None = ...): ...
    def thisf(self, counter: Any | None = ...): ...
    def nextf(self, counter: Any | None = ...): ...
    def setDefaultCounter(self, default: Any | None = ...) -> None: ...
    def registerFormat(self, format, func) -> None: ...
    def setFormat(self, counter, format) -> None: ...
    def reset(self, counter: Any | None = ..., base: int = ...) -> None: ...
    def chain(self, parent, child) -> None: ...
    def __getitem__(self, key): ...
    def format(self, template): ...
    def dump(self) -> None: ...

def getSequencer(): ...
def setSequencer(seq): ...
