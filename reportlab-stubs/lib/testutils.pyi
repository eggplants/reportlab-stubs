import unittest
from configparser import ConfigParser
from typing import Any

from reportlab.lib.utils import __rl_loader__ as __rl_loader__
from reportlab.lib.utils import asUnicode as asUnicode
from reportlab.lib.utils import isCompactDistro as isCompactDistro
from reportlab.lib.utils import rl_isdir as rl_isdir

__version__: str
__doc__: str

def isWritable(D): ...

_OUTDIR: Any
RL_HOME: Any
testsFolder: Any

def setOutDir(name): ...

_mockumap: Any

def mockUrlRead(name): ...
def outputfile(fn): ...
def printLocation(depth: int = ...) -> None: ...
def makeSuiteForClasses(*classes): ...
def getCVSEntries(folder, files: int = ..., folders: int = ...): ...

class ExtConfigParser(ConfigParser):
    pat: Any
    def getstringlist(self, section, option): ...

class GlobDirectoryWalker:
    index: int
    pattern: Any
    stack: Any
    files: Any
    directory: Any
    def __init__(self, directory, pattern: str = ...): ...
    def __getitem__(self, index): ...
    def filterFiles(self, folder, files): ...

class RestrictedGlobDirectoryWalker(GlobDirectoryWalker):
    ignorePatterns: Any
    def __init__(
        self, directory, pattern: str = ..., ignore: Any | None = ...
    ) -> None: ...
    def filterFiles(self, folder, files): ...

class CVSGlobDirectoryWalker(GlobDirectoryWalker):
    def filterFiles(self, folder, files): ...

class SecureTestCase(unittest.TestCase):
    _initialPath: Any
    _initialWorkDir: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class NearTestCase(unittest.TestCase):
    def assertNear(a, b, accuracy: float = ...) -> None: ...
    assertNear: Any

class ScriptThatMakesFileTest(unittest.TestCase):
    scriptDir: Any
    scriptName: Any
    outFileName: Any
    verbose: Any
    def __init__(
        self, scriptDir, scriptName, outFileName, verbose: int = ...
    ) -> None: ...
    cwd: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def runTest(self) -> None: ...

def equalStrings(a, b, enc: str = ...): ...
def eqCheck(r, x) -> None: ...
def rlextraNeeded(): ...
