from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics import _renderPM as _renderPM
from reportlab.graphics.renderbase import Renderer as Renderer
from reportlab.graphics.renderbase import getStateDelta as getStateDelta
from reportlab.graphics.renderbase import renderScaledDrawing as renderScaledDrawing
from reportlab.graphics.shapes import *
from reportlab.lib.utils import isUnicode as isUnicode
from reportlab.pdfbase.pdfmetrics import getFont as getFont
from reportlab.pdfbase.pdfmetrics import unicode2T1 as unicode2T1

from .utils import RenderPMError as RenderPMError

__version__: str
__doc__: str

def _getImage(): ...
def Color2Hex(c): ...
def draw(drawing, canvas, x, y, showBoundary=...) -> None: ...

class _PMRenderer(Renderer):
    def pop(self) -> None: ...
    def push(self, node) -> None: ...
    def applyState(self) -> None: ...
    def initState(self, x, y) -> None: ...
    def drawNode(self, node) -> None: ...
    def drawRect(self, rect) -> None: ...
    def drawLine(self, line) -> None: ...
    def drawImage(self, image) -> None: ...
    def drawCircle(self, circle) -> None: ...
    def drawPolyLine(self, polyline, _doClose: int = ...) -> None: ...
    def drawEllipse(self, ellipse) -> None: ...
    def drawPolygon(self, polygon) -> None: ...
    def drawString(self, stringObj) -> None: ...
    def drawPath(self, path): ...

def _convert2pilp(im): ...
def _convert2pilL(im): ...
def _convert2pil1(im): ...
def _saveAsPICT(im, fn, fmt, transparent: Any | None = ...) -> None: ...

BEZIER_ARC_MAGIC: float

class PMCanvas:
    ctm: Any
    def __init__(
        self,
        w,
        h,
        dpi: int = ...,
        bg: int = ...,
        configPIL: Any | None = ...,
        backend=...,
    ) -> None: ...
    @staticmethod
    def _getGState(w, h, bg, backend: str = ..., fmt: str = ...): ...
    def _drawTimeResize(self, w, h, bg: Any | None = ...) -> None: ...
    def toPIL(self): ...
    def saveToFile(self, fn, fmt: Any | None = ...): ...
    def saveToString(self, fmt: str = ...): ...
    def _saveToBMP(self, f) -> None: ...
    def setFont(self, fontName, fontSize, leading: Any | None = ...) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __getattr__(self, name): ...
    def fillstrokepath(self, stroke: int = ..., fill: int = ...) -> None: ...
    def _bezierArcSegmentCCW(self, cx, cy, rx, ry, theta0, theta1): ...
    def bezierArcCCW(self, cx, cy, rx, ry, theta0, theta1): ...
    def addEllipsoidalArc(self, cx, cy, rx, ry, ang1, ang2) -> None: ...
    def drawCentredString(self, x, y, text, text_anchor: str = ...) -> None: ...
    def drawRightString(self, text, x, y) -> None: ...
    def drawString(
        self, x, y, text, _fontInfo: Any | None = ..., text_anchor: str = ...
    ) -> None: ...
    def line(self, x1, y1, x2, y2) -> None: ...
    def rect(self, x, y, width, height, stroke: int = ..., fill: int = ...) -> None: ...
    def roundRect(self, x, y, width, height, rx, ry) -> None: ...
    def circle(self, cx, cy, r) -> None: ...
    def ellipse(self, cx, cy, rx, ry) -> None: ...
    def saveState(self) -> None: ...
    fillColor: Any
    fillOpacity: Any
    def setFillColor(self, aColor) -> None: ...
    strokeColor: Any
    strokeOpacity: Any
    def setStrokeColor(self, aColor) -> None: ...
    restoreState: Any
    lineCap: Any
    def setLineCap(self, cap) -> None: ...
    lineJoin: Any
    def setLineJoin(self, join) -> None: ...
    strokeWidth: Any
    def setLineWidth(self, width) -> None: ...

def drawToPMCanvas(
    d,
    dpi: int = ...,
    bg: int = ...,
    configPIL: Any | None = ...,
    showBoundary=...,
    backend=...,
): ...
def drawToPIL(
    d,
    dpi: int = ...,
    bg: int = ...,
    configPIL: Any | None = ...,
    showBoundary=...,
    backend=...,
): ...
def drawToPILP(
    d,
    dpi: int = ...,
    bg: int = ...,
    configPIL: Any | None = ...,
    showBoundary=...,
    backend=...,
): ...
def drawToFile(
    d,
    fn,
    fmt: str = ...,
    dpi: int = ...,
    bg: int = ...,
    configPIL: Any | None = ...,
    showBoundary=...,
    backend=...,
) -> None: ...
def drawToString(
    d,
    fmt: str = ...,
    dpi: int = ...,
    bg: int = ...,
    configPIL: Any | None = ...,
    showBoundary=...,
    backend=...,
): ...

save = drawToFile

def test(outDir: str = ..., shout: bool = ...): ...
