from typing import Any

from reportlab.graphics.barcode.common import Barcode

class USPS_4State(Barcode):
    _widthSize: int
    _heightSize: int
    _fontSize: int
    _humanReadable: int
    tops: Any
    bottoms: Any
    dimensions: Any
    _tracking: Any
    _routing: Any
    def __init__(self, value: str = ..., routing: str = ..., **kwd) -> None: ...
    _bvalue: Any
    _codewords: Any
    _characters: Any
    _barcodes: Any
    def _init(self) -> None: ...
    def scale(kind, D, s): ...
    scale: Any
    def tracking(self, tracking) -> None: ...
    tracking: Any
    def routing(self, routing) -> None: ...
    routing: Any
    _sized: Any
    def widthSize(self, value) -> None: ...
    widthSize: Any
    def heightSize(self, value) -> None: ...
    heightSize: Any
    def fontSize(self, value) -> None: ...
    fontSize: Any
    def humanReadable(self, value) -> None: ...
    humanReadable: Any
    def binary(self): ...
    binary: Any
    _fcs: Any
    def codewords(self): ...
    codewords: Any
    def table1(self): ...
    table1: Any
    def table2(self): ...
    table2: Any
    def characters(self): ...
    characters: Any
    def barcodes(self): ...
    barcodes: Any
    table4: Any
    _bits2bars: Any
    horizontalClearZone: Any
    verticalClearZone: Any
    @property
    def barWidth(self): ...
    @barWidth.setter
    def barWidth(self, value) -> None: ...
    @property
    def pitch(self): ...
    @pitch.setter
    def pitch(self, value) -> None: ...
    @property
    def barHeight(self): ...
    @barHeight.setter
    def barHeight(self, value) -> None: ...
    widthScale: Any
    heightScale: Any
    def width(self): ...
    width: Any
    def height(self): ...
    height: Any
    _width: Any
    _height: Any
    def computeSize(self) -> None: ...
    def wrap(self, aW, aH): ...
    def _getBarVInfo(self, y0: int = ...): ...
    def draw(self) -> None: ...
    def value(self): ...
    value: Any
    def drawHumanReadable(self) -> None: ...
    def annotate(self, x, y, text, fontName, fontSize, anchor: str = ...) -> None: ...
