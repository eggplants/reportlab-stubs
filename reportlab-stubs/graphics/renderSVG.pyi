import math
from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics.renderbase import Renderer as Renderer
from reportlab.graphics.renderbase import getStateDelta as getStateDelta
from reportlab.graphics.renderbase import renderScaledDrawing as renderScaledDrawing
from reportlab.graphics.shapes import STATE_DEFAULTS as STATE_DEFAULTS
from reportlab.graphics.shapes import Path as Path
from reportlab.graphics.shapes import UserNode as UserNode
from reportlab.graphics.shapes import *
from reportlab.lib.rl_accel import fp_str as fp_str
from reportlab.lib.utils import RLString as RLString
from reportlab.lib.utils import asNative as asNative
from reportlab.lib.utils import isBytes as isBytes
from reportlab.lib.utils import isUnicode as isUnicode
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth
from reportlab.pdfgen.canvas import FILL_EVEN_ODD as FILL_EVEN_ODD
from reportlab.pdfgen.canvas import FILL_NON_ZERO as FILL_NON_ZERO

from .renderPM import _getImage as _getImage

__doc__: str
sin = math.sin
cos = math.cos
pi: Any
AREA_STYLES: Any
LINE_STYLES: Any
TEXT_STYLES: Any
EXTRA_STROKE_STYLES: Any
EXTRA_FILL_STYLES: Any

def drawToString(d, showBoundary=..., **kwds): ...
def drawToFile(d, fn, showBoundary=..., **kwds) -> None: ...
def draw(drawing, canvas, x: int = ..., y: int = ..., showBoundary=...) -> None: ...
def _pointsFromList(L): ...
def transformNode(doc, newTag, node: Any | None = ..., **attrDict): ...

class EncodedWriter(list):
    BOMS: Any
    encoding: Any
    def __init__(self, encoding, bom: bool = ...) -> None: ...
    def write(self, u) -> None: ...
    def getvalue(self): ...

_fillRuleMap: Any

def py_fp_str(*args): ...

class SVGCanvas:
    verbose: Any
    encoding: Any
    bom: Any
    fontHacks: Any
    extraXmlDecl: Any
    _fillMode: Any
    code: Any
    style: Any
    path: str
    _strokeColor: Any
    fp_str: Any
    cfp_str: Any
    doc: Any
    svg: Any
    groupTree: Any
    scaleTree: Any
    currGroup: Any
    def __init__(
        self, size=..., encoding: str = ..., verbose: int = ..., bom: bool = ..., **kwds
    ): ...
    def save(self, fn: Any | None = ...) -> None: ...
    def NOTUSED_stringWidth(
        self, s, font: Any | None = ..., fontSize: Any | None = ...
    ): ...
    def _formatStyle(self, include=..., exclude: str = ..., **kwds): ...
    def _escape(self, s): ...
    def _genArcCode(self, x1, y1, x2, y2, startAng, extent): ...
    def _fillAndStroke(
        self,
        code,
        clip: int = ...,
        link_info: Any | None = ...,
        styles=...,
        fillMode: Any | None = ...,
    ) -> None: ...
    _lineCap: Any
    def setLineCap(self, v) -> None: ...
    _lineJoin: Any
    def setLineJoin(self, v) -> None: ...
    def setDash(self, array=..., phase: int = ...) -> None: ...
    def setStrokeColor(self, color) -> None: ...
    _fillColor: Any
    def setFillColor(self, color) -> None: ...
    def setFillMode(self, v) -> None: ...
    _lineWidth: Any
    def setLineWidth(self, width) -> None: ...
    _font: Any
    _fontSize: Any
    def setFont(self, font, fontSize) -> None: ...
    def _add_link(self, dom_object, link_info): ...
    def rect(
        self,
        x1,
        y1,
        x2,
        y2,
        rx: int = ...,
        ry: int = ...,
        link_info: Any | None = ...,
        **_svgAttrs
    ) -> None: ...
    def roundRect(
        self,
        x1,
        y1,
        x2,
        y2,
        rx: int = ...,
        ry: int = ...,
        link_info: Any | None = ...,
        **_svgAttrs
    ) -> None: ...
    def drawString(
        self,
        s,
        x,
        y,
        angle: int = ...,
        link_info: Any | None = ...,
        text_anchor: str = ...,
        textRenderMode: int = ...,
        **_svgAttrs
    ) -> None: ...
    def drawCentredString(
        self,
        s,
        x,
        y,
        angle: int = ...,
        text_anchor: str = ...,
        link_info: Any | None = ...,
        textRenderMode: int = ...,
        **_svgAttrs
    ) -> None: ...
    def drawRightString(
        self,
        text,
        x,
        y,
        angle: int = ...,
        text_anchor: str = ...,
        link_info: Any | None = ...,
        textRenderMode: int = ...,
        **_svgAttrs
    ) -> None: ...
    def comment(self, data) -> None: ...
    def drawImage(self, image, x, y, width, height, embed: bool = ...) -> None: ...
    def line(self, x1, y1, x2, y2) -> None: ...
    def ellipse(self, x1, y1, x2, y2, link_info: Any | None = ...) -> None: ...
    def circle(self, xc, yc, r, link_info: Any | None = ...) -> None: ...
    def drawCurve(self, x1, y1, x2, y2, x3, y3, x4, y4, closed: int = ...) -> None: ...
    def drawArc(
        self,
        x1,
        y1,
        x2,
        y2,
        startAng: int = ...,
        extent: int = ...,
        fromcenter: int = ...,
    ) -> None: ...
    def polygon(
        self, points, closed: int = ..., link_info: Any | None = ...
    ) -> None: ...
    def lines(
        self, lineList, color: Any | None = ..., width: Any | None = ...
    ) -> None: ...
    def polyLine(self, points) -> None: ...
    def startGroup(self, attrDict=...): ...
    def endGroup(self, currGroup) -> None: ...
    def transform(self, a, b, c, d, e, f) -> None: ...
    def translate(self, x, y) -> None: ...
    def scale(self, sx, sy) -> None: ...
    def moveTo(self, x, y) -> None: ...
    def lineTo(self, x, y) -> None: ...
    def curveTo(self, x1, y1, x2, y2, x3, y3) -> None: ...
    def closePath(self) -> None: ...
    def saveState(self) -> None: ...
    def restoreState(self) -> None: ...

class _SVGRenderer(Renderer):
    verbose: int
    def __init__(self) -> None: ...
    def drawNode(self, node) -> None: ...
    _restores: Any
    def _get_link_info_dict(self, obj): ...
    def drawGroup(self, group) -> None: ...
    def drawRect(self, rect) -> None: ...
    def drawString(self, stringObj) -> None: ...
    def drawLine(self, line) -> None: ...
    def drawCircle(self, circle) -> None: ...
    def drawWedge(self, wedge) -> None: ...
    def drawPolyLine(self, p) -> None: ...
    def drawEllipse(self, ellipse) -> None: ...
    def drawPolygon(self, p) -> None: ...
    def drawPath(self, path, fillMode=...): ...
    def drawImage(self, image) -> None: ...
    def applyStateChanges(self, delta, newState) -> None: ...

def test(outDir: str = ...) -> None: ...
