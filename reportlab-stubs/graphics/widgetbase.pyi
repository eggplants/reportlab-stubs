from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics import shapes as shapes
from reportlab.lib import colors as colors
from reportlab.lib.attrmap import *
from reportlab.lib.validators import *

__version__: str
__doc__: str

class PropHolder:
    _attrMap: Any
    def verify(self) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def getProperties(self, recur: int = ...): ...
    def setProperties(self, propDict) -> None: ...
    def dumpProperties(self, prefix: str = ...) -> None: ...

class Widget(PropHolder, shapes.UserNode):
    def _setKeywords(self, **kw) -> None: ...
    def draw(self) -> None: ...
    def demo(self) -> None: ...
    def provideNode(self): ...
    def getBounds(self): ...

class ScaleWidget(Widget):
    _attrMap: Any
    x: Any
    y: Any
    contents: Any
    scale: Any
    def __init__(
        self, x: int = ..., y: int = ..., scale: float = ..., contents: Any | None = ...
    ) -> None: ...
    def draw(self): ...

_ItemWrapper: Any

class CloneMixin:
    def clone(self, **kwds): ...

class TypedPropertyCollection(PropHolder):
    def __init__(self, exampleClass, **kwds) -> None: ...
    def wKlassFactory(self, Klass): ...
    def __getitem__(self, x): ...
    def __contains__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __len__(self): ...
    def getProperties(self, recur: int = ...): ...
    def setVector(self, **kw) -> None: ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...
    def checkAttr(self, key, a, default: Any | None = ...): ...

def tpcGetItem(obj, x): ...
def isWKlass(obj): ...

class StyleProperties(PropHolder):
    _attrMap: Any
    def __init__(self, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...

class TwoCircles(Widget):
    leftCircle: Any
    rightCircle: Any
    def __init__(self) -> None: ...
    def draw(self): ...

class Face(Widget):
    _attrMap: Any
    x: int
    y: int
    size: int
    skinColor: Any
    eyeColor: Any
    mood: str
    def __init__(self) -> None: ...
    def demo(self) -> None: ...
    def draw(self): ...

class TwoFaces(Widget):
    faceOne: Any
    faceTwo: Any
    def __init__(self) -> None: ...
    def draw(self): ...
    def demo(self) -> None: ...

class Sizer(Widget):
    _attrMap: Any
    contents: Any
    fillColor: Any
    strokeColor: Any
    def __init__(self, *elements) -> None: ...
    def _addNamedNode(self, name, node) -> None: ...
    def add(self, node, name: Any | None = ...) -> None: ...
    def getBounds(self): ...
    def draw(self): ...

class CandleStickProperties(PropHolder):
    _attrMap: Any
    strokeWidth: Any
    strokeColor: Any
    strokeDashArray: Any
    crossWidth: Any
    crossLo: Any
    crossHi: Any
    boxWidth: Any
    boxFillColor: Any
    boxStrokeColor: Any
    boxStrokeWidth: Any
    boxStrokeDashArray: Any
    boxLo: Any
    boxMid: Any
    boxHi: Any
    boxSides: Any
    position: Any
    candleKind: Any
    axes: Any
    chart: Any
    def __init__(self, **kwds) -> None: ...
    def __call__(self, _x, _y, _size, _color): ...

def CandleSticks(**kwds): ...
def test() -> None: ...
