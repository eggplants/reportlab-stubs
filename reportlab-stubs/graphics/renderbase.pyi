from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics.shapes import *
from reportlab.lib.validators import DerivedValue as DerivedValue

from .transform import inverse as inverse
from .transform import mmult as mmult

__version__: str
__doc__: str

def getStateDelta(shape): ...

class StateTracker:
    _deltas: Any
    _combined: Any
    def __init__(
        self, defaults: Any | None = ..., defaultObj: Any | None = ...
    ) -> None: ...
    def _applyDefaultObj(self, d): ...
    def push(self, delta) -> None: ...
    def pop(self): ...
    def getState(self): ...
    def getCTM(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...

def testStateTracker() -> None: ...
def _expandUserNode(node, canvas): ...
def renderScaledDrawing(d): ...

class Renderer:
    def undefined(self, operation) -> None: ...
    _tracker: Any
    _canvas: Any
    def draw(
        self, drawing, canvas, x: int = ..., y: int = ..., showBoundary=...
    ) -> None: ...
    def initState(self, x, y) -> None: ...
    def pop(self) -> None: ...
    def drawNode(self, node) -> None: ...
    def getStateValue(self, key): ...
    def fillDerivedValues(self, node) -> None: ...
    def drawNodeDispatcher(self, node) -> None: ...
    _restores: Any
    def drawGroup(self, group) -> None: ...
    def drawWedge(self, wedge) -> None: ...
    def drawPath(self, path) -> None: ...
    def drawRect(self, rect) -> None: ...
    def drawLine(self, line) -> None: ...
    def drawCircle(self, circle) -> None: ...
    def drawPolyLine(self, p) -> None: ...
    def drawEllipse(self, ellipse) -> None: ...
    def drawPolygon(self, p) -> None: ...
    def drawString(self, stringObj) -> None: ...
    def applyStateChanges(self, delta, newState) -> None: ...
    def drawImage(self, *args, **kwds) -> None: ...
