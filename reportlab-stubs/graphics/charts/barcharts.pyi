from typing import Any

from reportlab import cmp as cmp
from reportlab.graphics.charts.areas import PlotArea as PlotArea
from reportlab.graphics.charts.axes import XCategoryAxis as XCategoryAxis
from reportlab.graphics.charts.axes import XValueAxis as XValueAxis
from reportlab.graphics.charts.axes import YCategoryAxis as YCategoryAxis
from reportlab.graphics.charts.axes import YValueAxis as YValueAxis
from reportlab.graphics.charts.legends import _objStr as _objStr
from reportlab.graphics.charts.textlabels import BarChartLabel as BarChartLabel
from reportlab.graphics.charts.textlabels import (
    NoneOrInstanceOfNA_Label as NoneOrInstanceOfNA_Label,
)
from reportlab.graphics.shapes import Drawing as Drawing
from reportlab.graphics.shapes import Group as Group
from reportlab.graphics.shapes import Line as Line
from reportlab.graphics.shapes import PolyLine as PolyLine
from reportlab.graphics.shapes import Rect as Rect
from reportlab.graphics.widgetbase import PropHolder as PropHolder
from reportlab.graphics.widgetbase import (
    TypedPropertyCollection as TypedPropertyCollection,
)
from reportlab.graphics.widgetbase import tpcGetItem as tpcGetItem
from reportlab.graphics.widgets.markers import isSymbol as isSymbol
from reportlab.graphics.widgets.markers import uSymbol2Symbol as uSymbol2Symbol
from reportlab.lib import colors as colors
from reportlab.lib.attrmap import AttrMap as AttrMap
from reportlab.lib.attrmap import AttrMapValue as AttrMapValue
from reportlab.lib.utils import isStr as isStr
from reportlab.lib.utils import yieldNoneSplits as yieldNoneSplits
from reportlab.lib.validators import EitherOr as EitherOr
from reportlab.lib.validators import NoneOr as NoneOr
from reportlab.lib.validators import OneOf as OneOf
from reportlab.lib.validators import SequenceOf as SequenceOf
from reportlab.lib.validators import isBoolean as isBoolean
from reportlab.lib.validators import isColorOrNone as isColorOrNone
from reportlab.lib.validators import isInt as isInt
from reportlab.lib.validators import isListOfNumbersOrNone as isListOfNumbersOrNone
from reportlab.lib.validators import isNumber as isNumber
from reportlab.lib.validators import isNumberOrNone as isNumberOrNone
from reportlab.lib.validators import isString as isString
from reportlab.lib.validators import isStringOrNone as isStringOrNone
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth

__version__: str
__doc__: str

class BarChartProperties(PropHolder):
    _attrMap: Any
    strokeColor: Any
    fillColor: Any
    strokeWidth: float
    symbol: Any
    strokeDashArray: Any
    def __init__(self) -> None: ...

class BarChart(PlotArea):
    _attrMap: Any
    def makeSwatchSample(self, rowNo, x, y, width, height): ...
    def getSeriesName(self, i, default: Any | None = ...): ...
    categoryAxis: Any
    valueAxis: Any
    barSpacing: int
    reversePlotOrder: int
    data: Any
    useAbsolute: int
    barWidth: int
    groupSpacing: int
    barLabels: Any
    barLabelFormat: Any
    barLabelArray: Any
    bars: Any
    naLabel: Any
    zIndexOverrides: Any
    def __init__(self) -> None: ...
    def demo(self): ...
    _seriesOrder: Any
    def getSeriesOrder(self) -> None: ...
    _configureData: Any
    def _getConfigureData(self) -> None: ...
    def _getMinMax(self): ...
    def _drawBegin(self, org, length): ...
    def _drawFinish(self): ...
    _rowLength: Any
    _groupWidth: Any
    _normFactor: Any
    _normFactorB: Any
    _normFactorG: Any
    _normFactorS: Any
    _baseLine: Any
    _barPositions: Any
    def calcBarPositions(self) -> None: ...
    def _getLabelText(self, rowNo, colNo): ...
    def _labelXY(self, label, x, y, width, height): ...
    def _addBarLabel(self, g, rowNo, colNo, x, y, width, height) -> None: ...
    def _addNABarLabel(
        self,
        g,
        rowNo,
        colNo,
        x,
        y,
        width,
        height,
        calcOnly: bool = ...,
        na: Any | None = ...,
    ): ...
    def _addLabel(
        self, text, label, g, rowNo, colNo, x, y, width, height, calcOnly: bool = ...
    ): ...
    def _makeBar(self, g, x, y, width, height, rowNo, style) -> None: ...
    def _makeBars(self, g, lg) -> None: ...
    def _computeLabelPosition(self, text, label, rowNo, colNo, x, y, width, height): ...
    def _computeBarPositions(self) -> None: ...
    def _computeMaxSpace(self, size, required): ...
    def _computeSimpleBarLabelPositions(self): ...
    def makeBars(self): ...
    def _desiredCategoryAxisLength(self): ...
    def draw(self): ...

class VerticalBarChart(BarChart):
    _flipXY: int

class HorizontalBarChart(BarChart):
    _flipXY: int

class _FakeGroup:
    _data: Any
    _key: Any
    def __init__(self, cmp: Any | None = ...) -> None: ...
    def add(self, what) -> None: ...
    def value(self): ...
    def sort(self) -> None: ...

class BarChart3D(BarChart):
    _attrMap: Any
    theta_x: float
    theta_y: float
    zDepth: Any
    zSpace: Any
    _3d_dx: Any
    _3d_dy: Any
    def calcBarPositions(self) -> None: ...
    def _calc_z0(self, rowNo): ...
    def _makeBar(self, g, x, y, width, height, rowNo, style) -> None: ...
    def _addBarLabel(self, g, rowNo, colNo, x, y, width, height) -> None: ...
    def makeBars(self): ...

class VerticalBarChart3D(BarChart3D, VerticalBarChart):
    _cmpZ: Any

class HorizontalBarChart3D(BarChart3D, HorizontalBarChart):
    _cmpZ: Any

def sampleV0a(): ...
def sampleV0b(): ...
def sampleV0c(): ...
def sampleV1(): ...
def sampleV2a(): ...
def sampleV2b(): ...
def sampleV2c(): ...
def sampleV3(): ...
def sampleV4a(): ...
def sampleV4b(): ...
def sampleV4c(): ...
def sampleV4d(): ...

dataSample5: Any

def sampleV5a(): ...
def sampleV5b(): ...
def sampleV5c1(): ...
def sampleV5c2(): ...
def sampleV5c3(): ...
def sampleV5c4(): ...
def sampleH0a(): ...
def sampleH0b(): ...
def sampleH0c(): ...
def sampleH1(): ...
def sampleH2a(): ...
def sampleH2b(): ...
def sampleH2c(): ...
def sampleH3(): ...
def sampleH4a(): ...
def sampleH4b(): ...
def sampleH4c(): ...
def sampleH4d(): ...
def sampleH5a(): ...
def sampleH5b(): ...
def sampleH5c1(): ...
def sampleH5c2(): ...
def sampleH5c3(): ...
def sampleH5c4(): ...
def sampleSymbol1(): ...
def sampleStacked1(): ...

class SampleH5c4(Drawing):
    def __init__(self, width: int = ..., height: int = ..., *args, **kw) -> None: ...
