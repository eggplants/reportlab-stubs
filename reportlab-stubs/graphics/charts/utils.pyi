from typing import Any

from reportlab.graphics.shapes import Ellipse as Ellipse
from reportlab.graphics.shapes import Group as Group
from reportlab.graphics.shapes import String as String
from reportlab.graphics.shapes import inverse as inverse
from reportlab.graphics.shapes import numericXShift as numericXShift
from reportlab.graphics.shapes import transformPoints as transformPoints
from reportlab.lib.utils import flatten as flatten
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth

__version__: str
__doc__: str

def mkTimeTuple(timeString): ...
def str2seconds(timeString): ...
def seconds2str(seconds): ...
def nextRoundNumber(x): ...

_intervals: Any
_j_max: Any

def find_interval(lo, hi, I: int = ...): ...
def find_good_grid(lower, upper, n=..., grid: Any | None = ...): ...
def ticks(
    lower,
    upper,
    n=...,
    split: int = ...,
    percent: int = ...,
    grid: Any | None = ...,
    labelVOffset: int = ...,
): ...
def findNones(data): ...
def pairFixNones(pairs): ...
def maverage(data, n: int = ...): ...
def pairMaverage(data, n: int = ...): ...

class DrawTimeCollector:
    _nodes: Any
    _pmcanv: Any
    formats: Any
    disabled: bool
    def __init__(self, formats=...) -> None: ...
    _info: Any
    _info_append: Any
    def clear(self) -> None: ...
    def record(self, func, node, *args, **kwds) -> None: ...
    def __call__(self, node, canvas, renderer) -> None: ...
    @staticmethod
    def rectDrawTimeCallback(node, canvas, renderer, **kwds): ...
    @staticmethod
    def transformAndFlatten(A, p): ...
    @property
    def pmcanv(self): ...
    def wedgeDrawTimeCallback(self, node, canvas, renderer, **kwds): ...
    def save(self, fnroot) -> None: ...

def xyDist(xxx_todo_changeme, xxx_todo_changeme1): ...
def lineSegmentIntersect(
    xxx_todo_changeme2, xxx_todo_changeme3, xxx_todo_changeme4, xxx_todo_changeme5
): ...
def makeCircularString(
    x,
    y,
    radius,
    angle,
    text,
    fontName,
    fontSize,
    inside: int = ...,
    G: Any | None = ...,
    textAnchor: str = ...,
): ...

class CustomDrawChanger:
    store: Any
    def __init__(self) -> None: ...
    def __call__(self, change, obj) -> None: ...
    def _changer(self, obj) -> None: ...

class FillPairedData(list):
    other: Any
    def __init__(self, v, other: int = ...) -> None: ...
