from typing import Any

from reportlab.graphics.charts.textlabels import (
    DirectDrawFlowable as DirectDrawFlowable,
)
from reportlab.graphics.charts.textlabels import Label as Label
from reportlab.graphics.charts.textlabels import PMVLabel as PMVLabel
from reportlab.graphics.charts.textlabels import XLabel as XLabel
from reportlab.graphics.charts.utils import nextRoundNumber as nextRoundNumber
from reportlab.graphics.shapes import STATE_DEFAULTS as STATE_DEFAULTS
from reportlab.graphics.shapes import Drawing as Drawing
from reportlab.graphics.shapes import Group as Group
from reportlab.graphics.shapes import Line as Line
from reportlab.graphics.shapes import PolyLine as PolyLine
from reportlab.graphics.shapes import Rect as Rect
from reportlab.graphics.shapes import _rotatedBoxLimits as _rotatedBoxLimits
from reportlab.graphics.shapes import _textBoxLimits as _textBoxLimits
from reportlab.graphics.widgetbase import (
    TypedPropertyCollection as TypedPropertyCollection,
)
from reportlab.graphics.widgetbase import Widget as Widget
from reportlab.graphics.widgets.grids import ShadedRect as ShadedRect
from reportlab.lib import normalDate as normalDate
from reportlab.lib.attrmap import *
from reportlab.lib.colors import Color as Color
from reportlab.lib.utils import isSeq as isSeq
from reportlab.lib.validators import EitherOr as EitherOr
from reportlab.lib.validators import NoneOr as NoneOr
from reportlab.lib.validators import OneOf as OneOf
from reportlab.lib.validators import SequenceOf as SequenceOf
from reportlab.lib.validators import Validator as Validator
from reportlab.lib.validators import isBoolean as isBoolean
from reportlab.lib.validators import isColorOrNone as isColorOrNone
from reportlab.lib.validators import isListOfNumbers as isListOfNumbers
from reportlab.lib.validators import isListOfNumbersOrNone as isListOfNumbersOrNone
from reportlab.lib.validators import isListOfStringsOrNone as isListOfStringsOrNone
from reportlab.lib.validators import isNoneOrCallable as isNoneOrCallable
from reportlab.lib.validators import isNormalDate as isNormalDate
from reportlab.lib.validators import isNumber as isNumber
from reportlab.lib.validators import isNumberOrNone as isNumberOrNone
from reportlab.lib.validators import isString as isString

__version__: str
__doc__: str

def _findMinMaxValue(V, x, default, func, special: Any | None = ...): ...
def _findMin(V, x, default, special: Any | None = ...): ...
def _findMax(V, x, default, special: Any | None = ...): ...
def _allInt(values): ...

class AxisLabelAnnotation:
    _v: Any
    _kwds: Any
    def __init__(self, v, **kwds) -> None: ...
    def __call__(self, axis): ...

class AxisLineAnnotation:
    _v: Any
    _kwds: Any
    def __init__(self, v, **kwds) -> None: ...
    def __call__(self, axis): ...

class AxisBackgroundAnnotation:
    _colors: Any
    _kwds: Any
    def __init__(self, colors, **kwds) -> None: ...
    def __call__(self, axis): ...

class TickLU:
    accuracy: Any
    T: Any
    def __init__(self, *T, **kwds) -> None: ...
    def __contains__(self, t): ...
    def __getitem__(self, t): ...

class _AxisG(Widget):
    def _get_line_pos(self, v): ...
    def _cxLine(self, x, start, end): ...
    def _cyLine(self, y, start, end): ...
    def _cxLine3d(self, x, start, end, _3d_dx, _3d_dy): ...
    def _cyLine3d(self, y, start, end, _3d_dx, _3d_dy): ...
    def _getLineFunc(self, start, end, parent: Any | None = ...): ...
    def _makeLines(
        self,
        g,
        start,
        end,
        strokeColor,
        strokeWidth,
        strokeDashArray,
        strokeLineJoin,
        strokeLineCap,
        strokeMiterLimit,
        parent: Any | None = ...,
        exclude=...,
        specials=...,
    ): ...
    def makeGrid(
        self, g, dim: Any | None = ..., parent: Any | None = ..., exclude=...
    ) -> None: ...
    _tickValues: Any
    def _makeSubGrid(
        self, g, dim: Any | None = ..., parent: Any | None = ..., exclude=...
    ) -> None: ...
    def getGridDims(self, start: Any | None = ..., end: Any | None = ...): ...
    def isYAxis(self): ...
    isYAxis: Any
    def isXAxis(self): ...
    isXAxis: Any
    def addAnnotations(self, g, A: Any | None = ...) -> None: ...
    def _splitAnnotations(self): ...
    def draw(self): ...

class CALabel(PMVLabel):
    _attrMap: Any
    def __init__(self, **kw) -> None: ...

class CategoryAxis(_AxisG):
    _nodoc: int
    _attrMap: Any
    _x: int
    _y: int
    _length: int
    _catCount: int
    visible: int
    visibleAxis: int
    visibleTicks: int
    visibleLabels: int
    visibleGrid: int
    drawGridLast: bool
    strokeWidth: int
    strokeColor: Any
    strokeDashArray: Any
    gridStrokeLineJoin: Any
    gridStrokeLineCap: Any
    gridStrokeMiterLimit: Any
    gridStrokeWidth: float
    gridStrokeColor: Any
    gridStrokeDashArray: Any
    gridStart: Any
    strokeLineJoin: Any
    strokeLineCap: Any
    strokeMiterLimit: Any
    labels: Any
    categoryNames: Any
    joinAxis: Any
    joinAxisPos: Any
    joinAxisMode: Any
    labelAxisMode: str
    reverseDirection: int
    style: str
    _labelTextFormat: Any
    tickShift: int
    loPad: int
    hiPad: int
    loLLen: int
    hiLLen: int
    def __init__(self) -> None: ...
    def setPosition(self, x, y, length) -> None: ...
    _barWidth: Any
    _pmv: Any
    def configure(self, multiSeries, barWidth: Any | None = ...) -> None: ...
    _tickValues: Any
    def _calcTickmarkPositions(self) -> None: ...
    def _scale(self, idx): ...
    def scale(self, idx): ...
    def midScale(self, idx): ...

def _assertYAxis(axis) -> None: ...
def _assertXAxis(axis) -> None: ...

class _XTicks:
    _tickTweaks: int
    @property
    def actualTickStrokeWidth(self): ...
    @property
    def actualTickStrokeColor(self): ...
    def _drawTicksInner(self, tU, tD, g) -> None: ...
    def _drawTicks(self, tU, tD, g: Any | None = ...): ...
    _subTicking: int
    _tickValues: Any
    def _drawSubTicks(self, tU, tD, g) -> None: ...
    _y: Any
    def makeTicks(self): ...
    def _labelAxisPos(self, mode: Any | None = ...): ...

class _YTicks(_XTicks):
    def _labelAxisPos(self, mode: Any | None = ...): ...
    _x: Any
    def makeTicks(self): ...

class XCategoryAxis(_XTicks, CategoryAxis):
    _attrMap: Any
    _dataIndex: int
    tickUp: int
    tickDown: int
    def __init__(self) -> None: ...
    categoryNames: Any
    def demo(self): ...
    _y: Any
    def joinToAxis(self, yAxis, mode: str = ..., pos: Any | None = ...) -> None: ...
    def _joinToAxis(self) -> None: ...
    def loScale(self, idx): ...
    def makeAxis(self): ...
    def makeTickLabels(self): ...

class YCategoryAxis(_YTicks, CategoryAxis):
    _attrMap: Any
    _dataIndex: int
    tickLeft: int
    tickRight: int
    def __init__(self) -> None: ...
    categoryNames: Any
    def demo(self): ...
    _x: Any
    def joinToAxis(self, xAxis, mode: str = ..., pos: Any | None = ...) -> None: ...
    def _joinToAxis(self) -> None: ...
    def loScale(self, idx): ...
    def makeAxis(self): ...
    def makeTickLabels(self): ...

class TickLabeller:
    def __call__(self, axis, value): ...

_defaultLabelFormatter: Any

class ValueAxis(_AxisG):
    _attrMap: Any
    def __init__(self, **kw) -> None: ...
    _x: Any
    _y: Any
    _length: Any
    def setPosition(self, x, y, length) -> None: ...
    def configure(self, dataSeries) -> None: ...
    _configured: int
    def _configure_end(self) -> None: ...
    _valueMin: Any
    _valueMax: Any
    def _getValueStepAndTicks(self, valueMin, valueMax, cache=...): ...
    def _preRangeAdjust(self, valueMin, valueMax): ...
    _bubbleV: Any
    _bubbleMax: Any
    _bubbleRadius: Any
    _computedValueStep: Any
    def _setRange(self, dataSeries): ...
    def _pseudo_configure(self) -> None: ...
    def _rangeAdjust(self) -> None: ...
    def _adjustAxisTicks(self) -> None: ...
    _scaleFactor: Any
    def _calcScaleFactor(self): ...
    _valueStep: Any
    def _calcStepAndTickPositions(self): ...
    def _calcTickPositions(self): ...
    _subTickValues: Any
    _tickValues: Any
    def _calcSubTicks(self): ...
    def _calcTickmarkPositions(self): ...
    def _calcValueStep(self) -> None: ...
    def _allIntTicks(self): ...
    def makeTickLabels(self): ...
    def scale(self, value): ...

class XValueAxis(_XTicks, ValueAxis):
    _attrMap: Any
    _dataIndex: int
    tickUp: int
    tickDown: int
    joinAxis: Any
    joinAxisMode: Any
    joinAxisPos: Any
    def __init__(self, **kw) -> None: ...
    def demo(self): ...
    _y: Any
    def joinToAxis(self, yAxis, mode: str = ..., pos: Any | None = ...) -> None: ...
    def _joinToAxis(self) -> None: ...
    def makeAxis(self): ...

_months: Any
_maxDays: Any

def parseDayAndMonth(dmstr): ...

class _isListOfDaysAndMonths(Validator):
    def test(self, x): ...
    def normalize(self, x): ...

isListOfDaysAndMonths: Any
_NDINTM: Any

class NormalDateXValueAxis(XValueAxis):
    _attrMap: Any
    _valueClass: Any
    bottomAxisLabelSlack: float
    niceMonth: int
    forceEndDate: int
    forceFirstDate: int
    forceDatesEachYear: Any
    dailyFreq: int
    xLabelFormat: str
    dayOfWeekName: Any
    monthName: Any
    specialTickClear: int
    valueSteps: Any
    def __init__(self, **kw) -> None: ...
    def _scalar2AND(self, x): ...
    def _dateFormatter(self, v): ...
    def _xAxisTicker(self, xVals): ...
    def _convertXV(self, data) -> None: ...
    def _getStepsAndLabels(self, xVals): ...
    _tickValues: Any
    _labelTextFormat: Any
    _scaleFactor: Any
    _configured: int
    def configure(self, data) -> None: ...

class YValueAxis(_YTicks, ValueAxis):
    _attrMap: Any
    _dataIndex: int
    tickRight: int
    tickLeft: int
    joinAxis: Any
    joinAxisMode: Any
    joinAxisPos: Any
    def __init__(self) -> None: ...
    def demo(self): ...
    _x: Any
    def joinToAxis(self, xAxis, mode: str = ..., pos: Any | None = ...) -> None: ...
    def _joinToAxis(self) -> None: ...
    def makeAxis(self): ...

class TimeValueAxis:
    _mc: int
    _hc: Any
    _dc: Any
    labelTextFormat: Any
    _saved_tickInfo: Any
    def __init__(self, *args, **kwds) -> None: ...
    _unit: str
    _unitd: Any
    _valueStep: Any
    def _calcValueStep(self) -> None: ...
    def timeLabelTextFormatter(self, val): ...

class XTimeValueAxis(TimeValueAxis, XValueAxis):
    def __init__(self, *args, **kwds) -> None: ...

class AdjYValueAxis(YValueAxis):
    _attrMap: Any
    requiredRange: int
    leftAxisPercent: int
    leftAxisOrigShiftIPC: float
    leftAxisOrigShiftMin: int
    leftAxisSkipLL0: int
    valueSteps: Any
    def __init__(self, **kw) -> None: ...
    _valueMin: Any
    _valueMax: Any
    _tickValues: Any
    _labelTextFormat: Any
    def _rangeAdjust(self): ...

class LogValueAxis(ValueAxis):
    _scaleFactor: Any
    def _calcScaleFactor(self): ...
    _valueMin: Any
    _valueMax: Any
    def _setRange(self, dataSeries) -> None: ...
    _powerInc: Any
    def _calcTickPositions(self): ...
    _subTickValues: Any
    _tickValues: Any
    def _calcSubTicks(self): ...

class LogAxisTickLabeller(TickLabeller):
    def __call__(self, axis, value): ...

class LogAxisLabellingSetup:
    labels: Any
    labelTextFormat: Any
    def __init__(self) -> None: ...

class LogXValueAxis(LogValueAxis, LogAxisLabellingSetup, XValueAxis):
    _attrMap: Any
    def __init__(self) -> None: ...
    def scale(self, value): ...

class LogYValueAxis(LogValueAxis, LogAxisLabellingSetup, YValueAxis):
    _attrMap: Any
    def __init__(self) -> None: ...
    def scale(self, value): ...
