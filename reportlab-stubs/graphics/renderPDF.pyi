from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics.renderbase import STATE_DEFAULTS as STATE_DEFAULTS
from reportlab.graphics.renderbase import Renderer as Renderer
from reportlab.graphics.renderbase import getStateDelta as getStateDelta
from reportlab.graphics.renderbase import renderScaledDrawing as renderScaledDrawing
from reportlab.graphics.shapes import *
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth
from reportlab.pdfgen.canvas import Canvas as Canvas
from reportlab.platypus import Flowable as Flowable

__version__: str
__doc__: str

def draw(drawing, canvas, x, y, showBoundary=...) -> None: ...

class _PDFRenderer(Renderer):
    _stroke: int
    _fill: int
    def __init__(self) -> None: ...
    def drawNode(self, node) -> None: ...
    def drawRect(self, rect) -> None: ...
    def drawImage(self, image) -> None: ...
    def drawLine(self, line) -> None: ...
    def drawCircle(self, circle) -> None: ...
    def drawPolyLine(self, polyline) -> None: ...
    def drawWedge(self, wedge) -> None: ...
    def drawEllipse(self, ellipse) -> None: ...
    def drawPolygon(self, polygon) -> None: ...
    def drawString(self, stringObj) -> None: ...
    def drawPath(self, path) -> None: ...
    def setStrokeColor(self, c) -> None: ...
    def setFillColor(self, c) -> None: ...
    def applyStateChanges(self, delta, newState) -> None: ...

class GraphicsFlowable(Flowable):
    drawing: Any
    width: Any
    height: Any
    def __init__(self, drawing) -> None: ...
    def draw(self) -> None: ...

def drawToFile(
    d, fn, msg: str = ..., showBoundary=..., autoSize: int = ..., canvasKwds=...
) -> None: ...
def drawToString(
    d, msg: str = ..., showBoundary=..., autoSize: int = ..., canvasKwds=...
): ...
def test(outDir: str = ..., shout: bool = ...) -> None: ...
