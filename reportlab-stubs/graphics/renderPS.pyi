from typing import Any

from reportlab import rl_config as rl_config
from reportlab.graphics.renderbase import Renderer as Renderer
from reportlab.graphics.renderbase import getStateDelta as getStateDelta
from reportlab.graphics.renderbase import renderScaledDrawing as renderScaledDrawing
from reportlab.graphics.shapes import STATE_DEFAULTS as STATE_DEFAULTS
from reportlab.graphics.shapes import *
from reportlab.lib.rl_accel import fp_str as fp_str
from reportlab.lib.utils import asBytes as asBytes
from reportlab.lib.utils import asNative as asNative
from reportlab.lib.utils import char2int as char2int
from reportlab.lib.utils import isUnicode as isUnicode
from reportlab.lib.utils import rawBytes as rawBytes
from reportlab.pdfbase.pdfmetrics import getFont as getFont
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth
from reportlab.pdfbase.pdfmetrics import unicode2T1 as unicode2T1
from reportlab.pdfgen.canvas import FILL_EVEN_ODD as FILL_EVEN_ODD

__version__: str
__doc__: str
_ESCAPEDICT: Any

def _escape_and_limit(s): ...

PS_WinAnsiEncoding: str

class PSCanvas:
    _xtraState_push: Any
    _xtraState_pop: Any
    comments: int
    code: Any
    code_append: Any
    _sep: str
    _strokeColor: Any
    _fontsUsed: Any
    PostScriptLevel: Any
    _fillMode: Any
    def __init__(self, size=..., PostScriptLevel: int = ...) -> None: ...
    def comment(self, msg) -> None: ...
    def drawImage(
        self, image, x1, y1, width: Any | None = ..., height: Any | None = ...
    ) -> None: ...
    def clear(self) -> None: ...
    def _t1_re_encode(self) -> None: ...
    def save(self, f: Any | None = ...) -> None: ...
    def saveState(self) -> None: ...
    def restoreState(self) -> None: ...
    def stringWidth(self, s, font: Any | None = ..., fontSize: Any | None = ...): ...
    _lineCap: Any
    def setLineCap(self, v) -> None: ...
    _lineJoin: Any
    def setLineJoin(self, v) -> None: ...
    def setDash(self, array=..., phase: int = ...) -> None: ...
    def setStrokeColor(self, color) -> None: ...
    _color: Any
    def setColor(self, color) -> None: ...
    _fillColor: Any
    def setFillColor(self, color) -> None: ...
    def setFillMode(self, v) -> None: ...
    _lineWidth: Any
    def setLineWidth(self, width) -> None: ...
    _fontCodeLoc: Any
    _font: Any
    _fontSize: Any
    def setFont(self, font, fontSize, leading: Any | None = ...) -> None: ...
    def line(self, x1, y1, x2, y2) -> None: ...
    def _escape(self, s): ...
    def _textOut(self, x, y, s, textRenderMode: int = ...) -> None: ...
    def _issueT1String(self, fontObj, x, y, s, textRenderMode: int = ...) -> None: ...
    def drawString(
        self,
        x,
        y,
        s,
        angle: int = ...,
        text_anchor: str = ...,
        textRenderMode: int = ...,
    ) -> None: ...
    def drawCentredString(
        self, x, y, text, text_anchor: str = ..., textRenderMode: int = ...
    ) -> None: ...
    def drawRightString(
        self, text, x, y, text_anchor: str = ..., textRenderMode: int = ...
    ) -> None: ...
    def drawCurve(self, x1, y1, x2, y2, x3, y3, x4, y4, closed: int = ...) -> None: ...
    def rect(self, x1, y1, x2, y2, stroke: int = ..., fill: int = ...) -> None: ...
    def roundRect(self, x1, y1, x2, y2, rx: int = ..., ry: int = ...) -> None: ...
    def ellipse(self, x1, y1, x2, y2) -> None: ...
    def circle(self, xc, yc, r) -> None: ...
    def drawArc(
        self,
        x1,
        y1,
        x2,
        y2,
        startAng: int = ...,
        extent: int = ...,
        fromcenter: int = ...,
    ) -> None: ...
    def _genArcCode(self, x1, y1, x2, y2, startAng, extent): ...
    def polygon(
        self, p, closed: int = ..., stroke: int = ..., fill: int = ...
    ) -> None: ...
    def lines(
        self, lineList, color: Any | None = ..., width: Any | None = ...
    ) -> None: ...
    def moveTo(self, x, y) -> None: ...
    def lineTo(self, x, y) -> None: ...
    def curveTo(self, x1, y1, x2, y2, x3, y3) -> None: ...
    def closePath(self) -> None: ...
    def polyLine(self, p) -> None: ...
    def drawFigure(self, partList, closed: int = ...) -> None: ...
    def _fillAndStroke(
        self,
        code,
        clip: int = ...,
        fill: int = ...,
        stroke: int = ...,
        fillMode: Any | None = ...,
    ) -> None: ...
    def translate(self, x, y) -> None: ...
    def scale(self, x, y) -> None: ...
    def transform(self, a, b, c, d, e, f) -> None: ...
    def _drawTimeResize(self, w, h) -> None: ...
    def _drawImageLevel1(
        self, image, x1, y1, width: Any | None = ..., height: Any | None = ...
    ) -> None: ...
    def _AsciiHexEncode(self, input): ...
    def _drawImageLevel2(
        self, image, x1, y1, width: Any | None = ..., height: Any | None = ...
    ) -> None: ...

def draw(drawing, canvas, x: int = ..., y: int = ..., showBoundary=...) -> None: ...
def _pointsFromList(L): ...

class _PSRenderer(Renderer):
    def drawNode(self, node) -> None: ...
    _restores: Any
    def drawRect(self, rect) -> None: ...
    def drawLine(self, line) -> None: ...
    def drawCircle(self, circle) -> None: ...
    def drawWedge(self, wedge) -> None: ...
    def drawPolyLine(self, p) -> None: ...
    def drawEllipse(self, ellipse) -> None: ...
    def drawPolygon(self, p) -> None: ...
    def drawString(self, stringObj) -> None: ...
    def drawPath(self, path, fillMode: Any | None = ...): ...
    def applyStateChanges(self, delta, newState) -> None: ...
    def drawImage(self, image) -> None: ...

def drawToFile(d, fn, showBoundary=..., **kwd) -> None: ...
def drawToString(d, showBoundary=...): ...
def test(outDir: str = ..., shout: bool = ...) -> None: ...
