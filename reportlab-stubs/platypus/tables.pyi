from collections.abc import Generator
from typing import Any, NamedTuple

from reportlab.lib.styles import PropertySet
from reportlab.platypus.flowables import Flowable

class CellStyle(PropertySet):
    fontname: Any
    fontsize: int
    leading: int
    leftPadding: int
    rightPadding: int
    topPadding: int
    bottomPadding: int
    firstLineIndent: int
    color: str
    alignment: str
    background: str
    valign: str
    href: Any
    destination: Any
    name: Any
    def __init__(self, name, parent: Any | None = ...) -> None: ...
    def copy(self, result: Any | None = ...): ...

class TableStyle:
    _opts: Any
    _cmds: Any
    def __init__(
        self, cmds: Any | None = ..., parent: Any | None = ..., **kw
    ) -> None: ...
    def add(self, *cmd) -> None: ...
    def __repr__(self): ...
    def getCommands(self): ...

class _ExpandedCellTuple(tuple): ...

class RoundingRectDef(NamedTuple):
    x0: Any
    y0: Any
    w: Any
    h: Any
    x1: Any
    y1: Any
    ar: Any
    SL: Any

class RoundingRectLine(NamedTuple):
    xs: Any
    ys: Any
    xe: Any
    ye: Any
    weight: Any
    color: Any
    cap: Any
    dash: Any
    join: Any

class Table(Flowable):
    ident: Any
    hAlign: Any
    vAlign: Any
    _nrows: Any
    _cellvalues: Any
    _ncols: Any
    _longTableOptimize: Any
    __class__: Any
    _rowHeights: Any
    _colWidths: Any
    _cellStyles: Any
    _bkgrndcmds: Any
    _linecmds: Any
    _spanCmds: Any
    _nosplitCmds: Any
    _srflcmds: Any
    repeatRows: Any
    repeatCols: Any
    splitByRow: Any
    _rowSplitRange: Any
    spaceBefore: Any
    spaceAfter: Any
    _minRowHeights: Any
    def __init__(
        self,
        data,
        colWidths: Any | None = ...,
        rowHeights: Any | None = ...,
        style: Any | None = ...,
        repeatRows: int = ...,
        repeatCols: int = ...,
        splitByRow: int = ...,
        emptyTableAction: Any | None = ...,
        ident: Any | None = ...,
        hAlign: Any | None = ...,
        vAlign: Any | None = ...,
        normalizedData: int = ...,
        cellStyles: Any | None = ...,
        rowSplitRange: Any | None = ...,
        spaceBefore: Any | None = ...,
        spaceAfter: Any | None = ...,
        longTableOptimize: Any | None = ...,
        minRowHeights: Any | None = ...,
        cornerRadii=...,
    ) -> None: ...
    def __repr__(self): ...
    def normalizeData(self, data): ...
    def identity(self, maxLen: int = ...): ...
    def _cellListIter(self, C, aW, aH) -> Generator[Any, None, None]: ...
    def _cellListProcess(self, C, aW, aH): ...
    def _listCellGeom(
        self, V, w, s, W: Any | None = ..., H: Any | None = ..., aH: int = ...
    ): ...
    def _listValueWidth(self, V, aH: int = ..., aW: int = ...): ...
    _colpositions: Any
    _width: Any
    _width_calculated_once: int
    def _calc_width(self, availWidth, W: Any | None = ...) -> None: ...
    def _elementWidth(self, v, s): ...
    _rowpositions: Any
    _height: Any
    _hmax: Any
    def _calc_height(
        self, availHeight, availWidth, H: Any | None = ..., W: Any | None = ...
    ) -> None: ...
    def _calc(self, availWidth, availHeight) -> None: ...
    def _culprit(self): ...
    def _hasVariWidthElements(self, upToRow: Any | None = ...): ...
    def _canGetWidth(self, thing): ...
    _argW: Any
    def _calcPreliminaryWidths(self, availWidth): ...
    def minWidth(self): ...
    _spanRanges: Any
    _colSpanCells: Any
    _rowSpanCells: Any
    def _calcSpanRanges(self) -> None: ...
    _nosplitRanges: Any
    _colNoSplitCells: Any
    _rowNoSplitCells: Any
    def _calcNoSplitRanges(self) -> None: ...
    _spanRects: Any
    _vBlocks: Any
    _hBlocks: Any
    _hmax_spanRects: Any
    def _calcSpanRects(self) -> None: ...
    def setStyle(self, tblstyle) -> None: ...
    def normCellRange(self, sc, ec, sr, er): ...
    def _addCommand(self, cmd) -> None: ...
    _curcolor: Any
    def _drawLines(self) -> None: ...
    def _drawUnknown(self, start, end, weight, color, count, space) -> None: ...
    def _drawGrid(self, start, end, weight, color, count, space) -> None: ...
    def _drawBox(self, start, end, weight, color, count, space) -> None: ...
    def _drawInnerGrid(self, start, end, weight, color, count, space) -> None: ...
    _curweight: Any
    def _prepLine(self, weight, color) -> None: ...
    def _drawHLines(self, start, end, weight, color, count, space): ...
    def _drawHLinesB(self, start, end, weight, color, count, space) -> None: ...
    def _drawVLines(self, start, end, weight, color, count, space): ...
    def _drawVLinesA(self, start, end, weight, color, count, space) -> None: ...
    availWidth: Any
    def wrap(self, availWidth, availHeight): ...
    def onSplit(self, T, byRow: int = ...) -> None: ...
    def _cr_0(self, n, cmds, nr0, _srflMode: bool = ...) -> None: ...
    def _cr_1_1(self, n, nRows, repeatRows, cmds, _srflMode: bool = ...) -> None: ...
    def _cr_1_0(self, n, cmds, _srflMode: bool = ...) -> None: ...
    def _splitRows(self, availHeight): ...
    def _getRowImpossible(impossible, cells, ranges) -> None: ...
    _getRowImpossible: Any
    def _getFirstPossibleSplitRowPosition(self, availHeight): ...
    def split(self, availWidth, availHeight): ...
    _roundingRectDef: Any
    def _makeRoundedCornersClip(self, FUZZ=...) -> None: ...
    def _restoreRoundingObscuredLines(self) -> None: ...
    def draw(self) -> None: ...
    def _drawBkgrnd(self) -> None: ...
    _curcellstyle: Any
    def _drawCell(self, cellval, cellstyle, pos, size) -> None: ...
    _cornerRadii: Any
    def _setCornerRadii(self, cornerRadii) -> None: ...

class LongTable(Table):
    _longTableOptimize: int
