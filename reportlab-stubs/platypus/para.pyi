from typing import Any

from reportlab.lib import colors as colors
from reportlab.lib.colors import black as black
from reportlab.lib.enums import TA_CENTER as TA_CENTER
from reportlab.lib.enums import TA_JUSTIFY as TA_JUSTIFY
from reportlab.lib.enums import TA_LEFT as TA_LEFT
from reportlab.lib.enums import TA_RIGHT as TA_RIGHT
from reportlab.lib.rl_accel import fp_str as fp_str
from reportlab.lib.styles import _baseFontName as _baseFontName
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth
from reportlab.platypus.flowables import Flowable as Flowable

debug: int
DUMPPROGRAM: int
TOOSMALLSPACE: float

class paragraphEngine:
    lineOpHandlers: Any
    program: Any
    indent: float
    baseindent: float
    fontName: str
    fontSize: int
    leading: int
    fontColor: Any
    x: float
    alignment: Any
    textStateStack: Any
    def __init__(self, program: Any | None = ...) -> None: ...
    TEXT_STATE_VARIABLES: Any
    def pushTextState(self): ...
    def popTextState(self) -> None: ...
    def format(self, maxwidth, maxheight, program, leading: int = ...): ...
    def getState(self): ...
    def resetState(self, state) -> None: ...
    rightIndent: Any
    def fitLine(self, program, totalLength): ...
    def centerAlign(self, line, lineLength, maxLength): ...
    def rightAlign(self, line, lineLength, maxLength): ...
    def insertShift(self, line, shift): ...
    def justifyAlign(self, line, lineLength, maxLength): ...
    def shrinkWrap(self, line): ...
    def cleanProgram(self, line): ...
    def runOpCodes(self, program, canvas, textobject): ...

def stringLine(line, length): ...
def simpleJustifyAlign(line, currentLength, maxLength): ...
def readBool(text): ...
def readAlignment(text): ...
def readLength(text): ...
def lengthSequence(s, converter=...): ...
def readColor(text): ...

class StyleAttributeConverters:
    fontSize: Any
    leading: Any
    leftIndent: Any
    rightIndent: Any
    firstLineIndent: Any
    alignment: Any
    spaceBefore: Any
    spaceAfter: Any
    bulletFontSize: Any
    bulletIndent: Any
    textColor: Any
    backColor: Any

class SimpleStyle:
    name: str
    fontName: Any
    fontSize: int
    leading: int
    leftIndent: int
    rightIndent: int
    firstLineIndent: int
    alignment: Any
    spaceBefore: int
    spaceAfter: int
    bulletFontName: Any
    bulletFontSize: int
    bulletIndent: int
    textColor: Any
    backColor: Any
    def __init__(self, name, parent: Any | None = ..., **kw) -> None: ...
    def addAttributes(self, dictionary) -> None: ...

DEFAULT_ALIASES: Any

class FastPara(Flowable):
    style: Any
    simpletext: Any
    lines: Any
    def __init__(self, style, simpletext) -> None: ...
    availableWidth: Any
    height: Any
    def wrap(self, availableWidth, availableHeight): ...
    def split(self, availableWidth, availableHeight): ...
    def draw(self) -> None: ...
    def getSpaceBefore(self): ...
    def getSpaceAfter(self): ...

def defaultContext(): ...
def buildContext(stylesheet: Any | None = ...): ...

class Para(Flowable):
    spaceBefore: int
    spaceAfter: int
    baseindent: Any
    context: Any
    parsedText: Any
    bulletText: Any
    style1: Any
    program: Any
    formattedProgram: Any
    remainder: Any
    state: Any
    bold: int
    italic: int
    face: Any
    size: Any
    def __init__(
        self,
        style,
        parsedText: Any | None = ...,
        bulletText: Any | None = ...,
        state: Any | None = ...,
        context: Any | None = ...,
        baseindent: int = ...,
    ) -> None: ...
    def getSpaceBefore(self): ...
    def getSpaceAfter(self): ...
    availableHeight: Any
    myengine: Any
    cansplit: int
    height: Any
    laststate: Any
    remainderProgram: Any
    def wrap(self, availableWidth, availableHeight): ...
    def split(self, availableWidth, availableHeight): ...
    def draw(self) -> None: ...
    def compileProgram(self, parsedText, program: Any | None = ...): ...
    def linearize(
        self, program: Any | None = ..., parsedText: Any | None = ...
    ) -> None: ...
    def compileComponent(self, parsedText, program) -> None: ...
    def shiftfont(
        self,
        program,
        face: Any | None = ...,
        bold: Any | None = ...,
        italic: Any | None = ...,
    ): ...
    def compile_(self, attdict, content, extra, program) -> None: ...
    def compile_pageNumber(self, attdict, content, extra, program) -> None: ...
    def compile_b(self, attdict, content, extra, program) -> None: ...
    def compile_i(self, attdict, content, extra, program) -> None: ...
    def compile_u(self, attdict, content, extra, program) -> None: ...
    def compile_sub(self, attdict, content, extra, program) -> None: ...
    def compile_ul(
        self, attdict, content, extra, program, tagname: str = ...
    ) -> None: ...
    def compile_ol(self, attdict, content, extra, program): ...
    def compile_dl(self, attdict, content, extra, program) -> None: ...
    def compile_super(self, attdict, content, extra, program) -> None: ...
    def compile_font(self, attdict, content, extra, program) -> None: ...
    def compile_a(self, attdict, content, extra, program) -> None: ...
    def compile_link(self, attdict, content, extra, program) -> None: ...
    def compile_setLink(self, attdict, content, extra, program) -> None: ...
    def compile_bullet(self, attdict, content, extra, program) -> None: ...
    def do_bullet(self, text, program) -> None: ...
    def compile_tt(self, attdict, content, extra, program) -> None: ...
    def compile_greek(self, attdict, content, extra, program) -> None: ...
    def compile_evalString(self, attdict, content, extra, program) -> None: ...
    def compile_name(self, attdict, content, extra, program) -> None: ...
    def compile_getName(self, attdict, content, extra, program) -> None: ...
    def compile_seq(self, attdict, content, extra, program) -> None: ...
    def compile_seqReset(self, attdict, content, extra, program) -> None: ...
    def compile_seqDefault(self, attdict, content, extra, program) -> None: ...
    def compile_para(
        self, attdict, content, extra, program, stylename: str = ...
    ) -> None: ...

class bulletMaker:
    tagname: Any
    style: Any
    typ: Any
    count: int
    _first: int
    def __init__(self, tagname, atts, context) -> None: ...
    def makeBullet(self, atts, bl: Any | None = ...) -> None: ...

class EvalStringObject:
    tagname: str
    attdict: Any
    content: Any
    context: Any
    extra: Any
    def __init__(self, attdict, content, extra, context) -> None: ...
    def getOp(self, tuple, engine): ...
    def width(self, engine): ...
    def execute(self, engine, textobject, canvas) -> None: ...

class SeqObject(EvalStringObject):
    def getOp(self, tuple, engine): ...

class NameObject(EvalStringObject):
    tagname: str
    def execute(self, engine, textobject, canvas) -> None: ...

class SeqDefaultObject(NameObject):
    op: str
    def getOp(self, tuple, engine): ...

class SeqResetObject(NameObject):
    op: str
    def getOp(self, tuple, engine): ...

class GetNameObject(EvalStringObject):
    tagname: str

class PageNumberObject:
    example: Any
    def __init__(self, example: str = ...) -> None: ...
    def width(self, engine): ...
    def execute(self, engine, textobject, canvas) -> None: ...

def EmbedInRml2pdf(): ...
def handleSpecialCharacters(engine, text, program: Any | None = ...): ...
def Paragraph(
    text,
    style,
    bulletText: Any | None = ...,
    frags: Any | None = ...,
    context: Any | None = ...,
): ...

class UnderLineHandler:
    color: Any
    def __init__(self, color: Any | None = ...) -> None: ...
    xStart: Any
    yStart: Any
    def start_at(self, x, y, para, canvas, textobject) -> None: ...
    def end_at(self, x, y, para, canvas, textobject) -> None: ...

UNDERLINE: Any

class HotLink(UnderLineHandler):
    url: Any
    def __init__(self, url) -> None: ...
    def end_at(self, x, y, para, canvas, textobject) -> None: ...
    def link(self, rect, canvas) -> None: ...

class InternalLink(HotLink):
    def link(self, rect, canvas) -> None: ...

class DefDestination(HotLink):
    defined: int
    def link(self, rect, canvas) -> None: ...

def splitspace(text): ...

testparagraph: str
testparagraph1: str

def test2(canv, testpara) -> None: ...

testlink: Any
test_program: Any

def test() -> None: ...
