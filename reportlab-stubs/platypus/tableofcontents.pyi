from typing import Any

from reportlab.lib.styles import ParagraphStyle as ParagraphStyle
from reportlab.lib.styles import _baseFontName as _baseFontName
from reportlab.lib.units import cm as cm
from reportlab.lib.utils import asNative as asNative
from reportlab.lib.utils import asUnicode as asUnicode
from reportlab.lib.utils import commasplit as commasplit
from reportlab.lib.utils import decode_label as decode_label
from reportlab.lib.utils import encode_label as encode_label
from reportlab.lib.utils import escapeOnce as escapeOnce
from reportlab.lib.utils import strTypes as strTypes
from reportlab.pdfbase.pdfmetrics import stringWidth as stringWidth
from reportlab.pdfgen import canvas as canvas
from reportlab.platypus.doctemplate import IndexingFlowable as IndexingFlowable
from reportlab.platypus.flowables import Spacer as Spacer
from reportlab.platypus.paragraph import Paragraph as Paragraph
from reportlab.platypus.tables import Table as Table
from reportlab.platypus.tables import TableStyle as TableStyle

__version__: str
__doc__: str

def unquote(txt): ...

class set(list):
    def add(self, x) -> None: ...

def drawPageNumbers(
    canvas,
    style,
    pages,
    availWidth,
    availHeight,
    dot: str = ...,
    formatter: Any | None = ...,
) -> None: ...

delta: Any
epsilon: Any
defaultLevelStyles: Any
defaultTableStyle: Any

class TableOfContents(IndexingFlowable):
    rightColumnWidth: Any
    levelStyles: Any
    tableStyle: Any
    dotsMinLevel: Any
    formatter: Any
    _table: Any
    _entries: Any
    _lastEntries: Any
    def __init__(self, **kwds) -> None: ...
    def beforeBuild(self) -> None: ...
    def isIndexing(self): ...
    def isSatisfied(self): ...
    def notify(self, kind, stuff) -> None: ...
    def clearEntries(self) -> None: ...
    def getLevelStyle(self, n): ...
    def addEntry(self, level, text, pageNum, key: Any | None = ...) -> None: ...
    def addEntries(self, listOfEntries) -> None: ...
    def wrap(self, availWidth, availHeight): ...
    def split(self, availWidth, availHeight): ...
    def drawOn(self, canvas, x, y, _sW: int = ...) -> None: ...

def makeTuple(x): ...

class SimpleIndex(IndexingFlowable):
    _entries: Any
    _lastEntries: Any
    _flowable: Any
    def __init__(self, **kwargs) -> None: ...
    def getFormatFunc(self, formatName): ...
    textStyle: Any
    tableStyle: Any
    dot: Any
    headers: Any
    name: Any
    formatFunc: Any
    offset: Any
    def setup(
        self,
        style: Any | None = ...,
        dot: Any | None = ...,
        tableStyle: Any | None = ...,
        headers: bool = ...,
        name: Any | None = ...,
        format: str = ...,
        offset: int = ...,
    ) -> None: ...
    def __call__(self, canv, kind, label) -> None: ...
    def getCanvasMaker(self, canvasmaker=...): ...
    def isIndexing(self): ...
    def isSatisfied(self): ...
    def beforeBuild(self) -> None: ...
    def clearEntries(self) -> None: ...
    def notify(self, kind, stuff) -> None: ...
    def addEntry(self, text, pageNum, key: Any | None = ...) -> None: ...
    def split(self, availWidth, availHeight): ...
    def _getlastEntries(self, dummy=...): ...
    def _build(self, availWidth, availHeight): ...
    def wrap(self, availWidth, availHeight): ...
    def drawOn(self, canvas, x, y, _sW: int = ...) -> None: ...
    def draw(self) -> None: ...
    def getLevelStyle(self, n): ...

AlphabeticIndex = SimpleIndex

def listdiff(l1, l2): ...

class ReferenceText(IndexingFlowable):
    textPattern: Any
    target: Any
    paraStyle: Any
    _lastPageNum: Any
    _pageNum: int
    _para: Any
    def __init__(self, textPattern, targetKey) -> None: ...
    def beforeBuild(self) -> None: ...
    def notify(self, kind, stuff) -> None: ...
    def wrap(self, availWidth, availHeight): ...
    def drawOn(self, canvas, x, y, _sW: int = ...) -> None: ...
