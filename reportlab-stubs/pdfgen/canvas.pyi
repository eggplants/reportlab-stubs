from typing import Any

from reportlab.pdfgen.textobject import _PDFColorSetter

class ExtGState:
    defaults: Any
    allowed: Any
    pdfNameValues: Any
    @staticmethod
    def _boolTransform(v): ...
    @staticmethod
    def _identityTransform(v): ...
    @staticmethod
    def _pdfNameTransform(v): ...
    _d: Any
    _c: Any
    def __init__(self) -> None: ...
    def set(self, canv, a, v) -> None: ...
    def getValue(self, a): ...
    def getState(self): ...
    def pushCopy(self): ...

class Canvas(_PDFColorSetter):
    _initialFontName: Any
    _initialFontSize: Any
    _initialLeading: Any
    _filename: Any
    _doc: Any
    _enforceColorSpace: Any
    _verbosity: Any
    _onPage: Any
    _cropMarks: Any
    _pagesize: Any
    _hanging_pagesize: Any
    _pageRotation: int
    _pageTransition: Any
    _pageDuration: Any
    _destinations: Any
    _pageNumber: int
    _codeStack: Any
    _annotationCount: int
    _outlines: Any
    _psCommandsBeforePage: Any
    _psCommandsAfterPage: Any
    bottomup: Any
    imageCaching: Any
    _cropBox: Any
    _artBox: Any
    _trimBox: Any
    _bleedBox: Any
    state_stack: Any
    def __init__(
        self,
        filename,
        pagesize: Any | None = ...,
        bottomup: int = ...,
        pageCompression: Any | None = ...,
        invariant: Any | None = ...,
        verbosity: int = ...,
        encrypt: Any | None = ...,
        cropMarks: Any | None = ...,
        pdfVersion: Any | None = ...,
        enforceColorSpace: Any | None = ...,
        initialFontName: Any | None = ...,
        initialFontSize: Any | None = ...,
        initialLeading: Any | None = ...,
        cropBox: Any | None = ...,
        artBox: Any | None = ...,
        trimBox: Any | None = ...,
        bleedBox: Any | None = ...,
        lang: Any | None = ...,
    ) -> None: ...
    def setEncrypt(self, encrypt) -> None: ...
    _x: int
    _y: int
    _fontname: Any
    _fontsize: Any
    _textMode: int
    _leading: Any
    _currentMatrix: Any
    _fillMode: Any
    _charSpace: int
    _wordSpace: int
    _horizScale: int
    _textRenderMode: int
    _rise: int
    _textLineMatrix: Any
    _textMatrix: Any
    _lineCap: int
    _lineJoin: int
    _lineDash: Any
    _lineWidth: int
    _mitreLimit: int
    _fillColorObj: Any
    _extgstate: Any
    def init_graphics_state(self) -> None: ...
    def push_state_stack(self) -> None: ...
    def pop_state_stack(self) -> None: ...
    STATE_ATTRIBUTES: Any
    STATE_RANGE: Any
    _preamble: Any
    def _make_preamble(self) -> None: ...
    def _escape(self, s): ...
    def setAuthor(self, author) -> None: ...
    def setDateFormatter(self, dateFormatter) -> None: ...
    def addOutlineEntry(
        self, title, key, level: int = ..., closed: Any | None = ...
    ) -> None: ...
    def setOutlineNames0(self, *nametree) -> None: ...
    def setTitle(self, title) -> None: ...
    def setSubject(self, subject) -> None: ...
    def setCreator(self, creator) -> None: ...
    def setProducer(self, producer) -> None: ...
    def setKeywords(self, keywords) -> None: ...
    def pageHasData(self): ...
    def showOutline(self) -> None: ...
    def showFullScreen0(self) -> None: ...
    def _setStrokeAlpha(self, v) -> None: ...
    def _setFillAlpha(self, v) -> None: ...
    def _setStrokeOverprint(self, v) -> None: ...
    def _setFillOverprint(self, v) -> None: ...
    def _setOverprintMask(self, v) -> None: ...
    def setBlendMode(self, v) -> None: ...
    def _getCmShift(self): ...
    def showPage(self) -> None: ...
    def _startPage(self) -> None: ...
    def setPageCallBack(self, func) -> None: ...
    def _setAnnotations(self, page) -> None: ...
    def _setColorSpace(self, obj) -> None: ...
    def _setShadingUsed(self, page) -> None: ...
    def _setXObjects(self, thing) -> None: ...
    def _bookmarkReference(self, name): ...
    def bookmarkPage(
        self,
        key,
        fit: str = ...,
        left: Any | None = ...,
        top: Any | None = ...,
        bottom: Any | None = ...,
        right: Any | None = ...,
        zoom: Any | None = ...,
    ): ...
    def bookmarkHorizontalAbsolute(
        self, key, top, left: int = ..., fit: str = ..., **kw
    ): ...
    def bookmarkHorizontal(self, key, relativeX, relativeY, **kw) -> None: ...
    def doForm(self, name) -> None: ...
    def hasForm(self, name): ...
    _currentPageHasImages: int
    def drawInlineImage(
        self,
        image,
        x,
        y,
        width: Any | None = ...,
        height: Any | None = ...,
        preserveAspectRatio: bool = ...,
        anchor: str = ...,
        anchorAtXY: bool = ...,
        showBoundary: bool = ...,
    ): ...
    def drawImage(
        self,
        image,
        x,
        y,
        width: Any | None = ...,
        height: Any | None = ...,
        mask: Any | None = ...,
        preserveAspectRatio: bool = ...,
        anchor: str = ...,
        anchorAtXY: bool = ...,
        showBoundary: bool = ...,
    ): ...
    _code: Any
    _formsinuse: Any
    _annotationrefs: Any
    _formData: Any
    _colorsUsed: Any
    _shadingUsed: Any
    def _restartAccumulators(self) -> None: ...
    def _pushAccumulators(self) -> None: ...
    def _setExtGState(self, obj) -> None: ...
    def beginForm(
        self,
        name,
        lowerx: int = ...,
        lowery: int = ...,
        upperx: Any | None = ...,
        uppery: Any | None = ...,
    ) -> None: ...
    def endForm(self, **extra_attributes) -> None: ...
    def addPostScriptCommand(self, command, position: int = ...) -> None: ...
    def _absRect(self, rect, relative: int = ...): ...
    def freeTextAnnotation(
        self,
        contents,
        DA,
        Rect: Any | None = ...,
        addtopage: int = ...,
        name: Any | None = ...,
        relative: int = ...,
        **kw
    ) -> None: ...
    def textAnnotation(
        self,
        contents,
        Rect: Any | None = ...,
        addtopage: int = ...,
        name: Any | None = ...,
        relative: int = ...,
        **kw
    ) -> None: ...
    textAnnotation0: Any
    def highlightAnnotation(
        self,
        contents,
        Rect,
        QuadPoints: Any | None = ...,
        Color=...,
        addtopage: int = ...,
        name: Any | None = ...,
        relative: int = ...,
        **kw
    ) -> None: ...
    def inkAnnotation(
        self,
        contents,
        InkList: Any | None = ...,
        Rect: Any | None = ...,
        addtopage: int = ...,
        name: Any | None = ...,
        relative: int = ...,
        **kw
    ) -> None: ...
    inkAnnotation0: Any
    def linkAbsolute(
        self,
        contents,
        destinationname,
        Rect: Any | None = ...,
        addtopage: int = ...,
        name: Any | None = ...,
        thickness: int = ...,
        color: Any | None = ...,
        dashArray: Any | None = ...,
        **kw
    ): ...
    def linkRect(
        self,
        contents,
        destinationname,
        Rect: Any | None = ...,
        addtopage: int = ...,
        name: Any | None = ...,
        relative: int = ...,
        thickness: int = ...,
        color: Any | None = ...,
        dashArray: Any | None = ...,
        **kw
    ): ...
    def linkURL(
        self,
        url,
        rect,
        relative: int = ...,
        thickness: int = ...,
        color: Any | None = ...,
        dashArray: Any | None = ...,
        kind: str = ...,
        **kw
    ) -> None: ...
    def _addAnnotation(
        self, annotation, name: Any | None = ..., addtopage: int = ...
    ) -> None: ...
    def _annotatePage(self, name) -> None: ...
    def getPageNumber(self): ...
    def save(self) -> None: ...
    def getpdfdata(self): ...
    def setPageSize(self, size) -> None: ...
    def setCropBox(self, size, name: str = ...) -> None: ...
    def setTrimBox(self, size) -> None: ...
    def setArtBox(self, size) -> None: ...
    def setBleedBox(self, size) -> None: ...
    def setPageRotation(self, rot) -> None: ...
    def addLiteral(self, s, escaped: int = ...) -> None: ...
    def resetTransforms(self) -> None: ...
    def transform(self, a, b, c, d, e, f) -> None: ...
    def absolutePosition(self, x, y): ...
    def translate(self, dx, dy) -> None: ...
    def scale(self, x, y) -> None: ...
    def rotate(self, theta) -> None: ...
    def skew(self, alpha, beta) -> None: ...
    def saveState(self) -> None: ...
    def restoreState(self) -> None: ...
    def line(self, x1, y1, x2, y2) -> None: ...
    def lines(self, linelist) -> None: ...
    def cross(
        self,
        x,
        y,
        size: int = ...,
        gap: int = ...,
        text: Any | None = ...,
        strokeColor: Any | None = ...,
        strokeWidth: Any | None = ...,
        fontSize: int = ...,
    ) -> None: ...
    def grid(self, xlist, ylist) -> None: ...
    def bezier(self, x1, y1, x2, y2, x3, y3, x4, y4) -> None: ...
    def arc(self, x1, y1, x2, y2, startAng: int = ..., extent: int = ...) -> None: ...
    def rect(self, x, y, width, height, stroke: int = ..., fill: int = ...) -> None: ...
    def ellipse(self, x1, y1, x2, y2, stroke: int = ..., fill: int = ...) -> None: ...
    def wedge(
        self, x1, y1, x2, y2, startAng, extent, stroke: int = ..., fill: int = ...
    ) -> None: ...
    def circle(self, x_cen, y_cen, r, stroke: int = ..., fill: int = ...) -> None: ...
    def roundRect(
        self, x, y, width, height, radius, stroke: int = ..., fill: int = ...
    ) -> None: ...
    def _addShading(self, shading): ...
    def shade(self, shading) -> None: ...
    def linearGradient(
        self, x0, y0, x1, y1, colors, positions: Any | None = ..., extend: bool = ...
    ) -> None: ...
    def radialGradient(
        self, x, y, radius, colors, positions: Any | None = ..., extend: bool = ...
    ) -> None: ...
    def drawString(
        self,
        x,
        y,
        text,
        mode: Any | None = ...,
        charSpace: int = ...,
        direction: Any | None = ...,
        wordSpace: Any | None = ...,
    ) -> None: ...
    def drawRightString(
        self,
        x,
        y,
        text,
        mode: Any | None = ...,
        charSpace: int = ...,
        direction: Any | None = ...,
        wordSpace: Any | None = ...,
    ) -> None: ...
    def drawCentredString(
        self,
        x,
        y,
        text,
        mode: Any | None = ...,
        charSpace: int = ...,
        direction: Any | None = ...,
        wordSpace: Any | None = ...,
    ) -> None: ...
    def drawAlignedString(
        self,
        x,
        y,
        text,
        pivotChar=...,
        mode: Any | None = ...,
        charSpace: int = ...,
        direction: Any | None = ...,
        wordSpace: Any | None = ...,
    ) -> None: ...
    def getAvailableFonts(self): ...
    def listLoadedFonts0(self): ...
    def setFont(self, psfontname, size, leading: Any | None = ...) -> None: ...
    def setFontSize(
        self, size: Any | None = ..., leading: Any | None = ...
    ) -> None: ...
    def stringWidth(
        self, text, fontName: Any | None = ..., fontSize: Any | None = ...
    ): ...
    def setLineWidth(self, width) -> None: ...
    def setLineCap(self, mode) -> None: ...
    def setLineJoin(self, mode) -> None: ...
    _miterLimit: Any
    def setMiterLimit(self, limit) -> None: ...
    def setDash(self, array=..., phase: int = ...) -> None: ...
    def beginPath(self): ...
    def drawPath(
        self, aPath, stroke: int = ..., fill: int = ..., fillMode: Any | None = ...
    ) -> None: ...
    def _strokeAndFill(self, stroke, fill, fillMode: Any | None = ...) -> None: ...
    def clipPath(
        self, aPath, stroke: int = ..., fill: int = ..., fillMode: Any | None = ...
    ) -> None: ...
    def beginText(self, x: int = ..., y: int = ..., direction: Any | None = ...): ...
    def drawText(self, aTextObject) -> None: ...
    _pageCompression: Any
    def setPageCompression(self, pageCompression: int = ...) -> None: ...
    def setPageDuration(self, duration: Any | None = ...) -> None: ...
    def setPageTransition(
        self,
        effectname: Any | None = ...,
        duration: int = ...,
        direction: int = ...,
        dimension: str = ...,
        motion: str = ...,
    ) -> None: ...
    def getCurrentPageContent(self): ...
    def setViewerPreference(self, pref, value) -> None: ...
    def getViewerPreference(self, pref): ...
    def delViewerPreference(self, pref) -> None: ...
    def setCatalogEntry(self, key, value) -> None: ...
    def getCatalogEntry(self, key): ...
    def delCatalogEntry(self, key) -> None: ...
    def addPageLabel(
        self,
        pageNum,
        style: Any | None = ...,
        start: Any | None = ...,
        prefix: Any | None = ...,
    ) -> None: ...
    @property
    def acroForm(self): ...
    _drawBoundary: Any
    @property
    def drawBoundary(self): ...
