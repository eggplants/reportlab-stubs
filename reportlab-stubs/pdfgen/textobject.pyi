from typing import Any

from reportlab.lib.colors import CMYKColor as CMYKColor
from reportlab.lib.colors import CMYKColorSep as CMYKColorSep
from reportlab.lib.colors import Color as Color
from reportlab.lib.colors import toColor as toColor
from reportlab.lib.rl_accel import fp_str as fp_str
from reportlab.lib.utils import asUnicode as asUnicode
from reportlab.lib.utils import isBytes as isBytes
from reportlab.lib.utils import isStr as isStr
from reportlab.pdfbase import pdfmetrics as pdfmetrics
from reportlab.rl_config import rtlSupport as rtlSupport

__version__: str
__doc__: str
log2vis: Any

def fribidiText(text, direction): ...

directionsMap: Any

class _PDFColorSetter:
    def _checkSeparation(self, cmyk): ...
    _enforceColorSpace: Any
    def setFillColorCMYK(self, c, m, y, k, alpha: Any | None = ...) -> None: ...
    def setStrokeColorCMYK(self, c, m, y, k, alpha: Any | None = ...) -> None: ...
    def setFillColorRGB(self, r, g, b, alpha: Any | None = ...) -> None: ...
    def setStrokeColorRGB(self, r, g, b, alpha: Any | None = ...) -> None: ...
    _fillColorObj: Any
    def setFillColor(self, aColor, alpha: Any | None = ...) -> None: ...
    _strokeColorObj: Any
    def setStrokeColor(self, aColor, alpha: Any | None = ...) -> None: ...
    def setFillGray(self, gray, alpha: Any | None = ...) -> None: ...
    def setStrokeGray(self, gray, alpha: Any | None = ...) -> None: ...
    def setStrokeAlpha(self, a) -> None: ...
    def setFillAlpha(self, a) -> None: ...
    def setStrokeOverprint(self, a) -> None: ...
    def setFillOverprint(self, a) -> None: ...
    def setOverprintMask(self, a) -> None: ...

class PDFTextObject(_PDFColorSetter):
    _code: Any
    _canvas: Any
    _fontname: Any
    _fontsize: Any
    _leading: Any
    _doc: Any
    _colorsUsed: Any
    _enforceColorSpace: Any
    _curSubset: int
    direction: Any
    _textRenderMode: int
    _clipping: int
    def __init__(
        self, canvas, x: int = ..., y: int = ..., direction: Any | None = ...
    ) -> None: ...
    def getCode(self): ...
    _x0: Any
    _y0: Any
    def setTextOrigin(self, x, y) -> None: ...
    def setTextTransform(self, a, b, c, d, e, f) -> None: ...
    _x: Any
    _y: Any
    def moveCursor(self, dx, dy) -> None: ...
    def setXPos(self, dx) -> None: ...
    def getCursor(self): ...
    def getStartOfLine(self): ...
    def getX(self): ...
    def getY(self): ...
    def _setFont(self, psfontname, size) -> None: ...
    def setFont(self, psfontname, size, leading: Any | None = ...) -> None: ...
    _charSpace: Any
    def setCharSpace(self, charSpace) -> None: ...
    _wordSpace: Any
    def setWordSpace(self, wordSpace) -> None: ...
    _horizScale: Any
    def setHorizScale(self, horizScale) -> None: ...
    def setLeading(self, leading) -> None: ...
    def setTextRenderMode(self, mode) -> None: ...
    _rise: Any
    def setRise(self, rise) -> None: ...
    def _formatText(self, text): ...
    def _textOut(self, text, TStar: int = ...) -> None: ...
    def textOut(self, text) -> None: ...
    def textLine(self, text: str = ...) -> None: ...
    def textLines(self, stuff, trim: int = ...) -> None: ...
    def __nonzero__(self): ...
    def _setFillAlpha(self, v) -> None: ...
    def _setStrokeOverprint(self, v) -> None: ...
    def _setFillOverprint(self, v) -> None: ...
    def _setOverprintMask(self, v) -> None: ...
