from typing import Any

from reportlab import rl_config as rl_config
from reportlab.lib.rl_accel import asciiBase85Decode as asciiBase85Decode
from reportlab.lib.rl_accel import asciiBase85Encode as asciiBase85Encode
from reportlab.lib.rl_accel import escapePDF as escapePDF
from reportlab.lib.rl_accel import fp_str as fp_str
from reportlab.lib.utils import TimeStamp as TimeStamp
from reportlab.lib.utils import _digester as _digester
from reportlab.lib.utils import annotateException as annotateException
from reportlab.lib.utils import bytestr as bytestr
from reportlab.lib.utils import isBytes as isBytes
from reportlab.lib.utils import isSeq as isSeq
from reportlab.lib.utils import isStr as isStr
from reportlab.lib.utils import isUnicode as isUnicode
from reportlab.lib.utils import makeFileName as makeFileName
from reportlab.lib.utils import open_for_read as open_for_read
from reportlab.pdfbase import pdfmetrics as pdfmetrics
from reportlab.pdfbase import pdfutils as pdfutils

__version__: str
__doc__: str

class PDFError(Exception): ...

__InternalName__: str
__RefOnly__: str
__Comment__: str
BasicFonts: str
Pages: str
PDF_VERSION_DEFAULT: Any
PDF_SUPPORT_VERSION: Any

def pdfdocEnc(x): ...
def format(element, document, toplevel: int = ...): ...
def xObjectName(externalname): ...

formName = xObjectName

class NoEncryption:
    def encode(self, t): ...
    def prepare(self, document) -> None: ...
    def register(self, objnum, version) -> None: ...
    def info(self) -> None: ...

class PDFObject: ...

class DummyDoc(PDFObject):
    encrypt: Any

class PDFDocument(PDFObject):
    defaultStreamFilters: Any
    encrypt: Any
    _ID: Any
    objectcounter: int
    shadingCounter: int
    inObject: Any
    pageCounter: int
    invariant: Any
    _pdfVersion: Any
    _timeStamp: Any
    idToObjectNumberAndVersion: Any
    idToObject: Any
    idToOffset: Any
    numberToId: Any
    outline: Any
    info: Any
    fontMapping: Any
    delayedFonts: Any
    def __init__(
        self,
        dummyoutline: int = ...,
        compression=...,
        invariant=...,
        filename: Any | None = ...,
        pdfVersion=...,
        lang: Any | None = ...,
    ) -> None: ...
    compression: Any
    def setCompression(self, onoff) -> None: ...
    def ensureMinPdfVersion(self, *keys) -> None: ...
    def updateSignature(self, thing) -> None: ...
    def ID(self): ...
    _savedToFile: bool
    def SaveToFile(self, filename, canvas) -> None: ...
    def GetPDFData(self, canvas): ...
    def inPage(self) -> None: ...
    def inForm(self) -> None: ...
    def getInternalFontName(self, psfontname): ...
    def thisPageName(self): ...
    def thisPageRef(self): ...
    def addPage(self, page) -> None: ...
    def addForm(self, name, form) -> None: ...
    def annotationName(self, externalname): ...
    def addAnnotation(self, name, annotation) -> None: ...
    def refAnnotation(self, name): ...
    def addShading(self, shading): ...
    def addColor(self, cmyk): ...
    def setTitle(self, title) -> None: ...
    def setAuthor(self, author) -> None: ...
    def setSubject(self, subject) -> None: ...
    def setCreator(self, creator) -> None: ...
    def setProducer(self, producer) -> None: ...
    def setKeywords(self, keywords) -> None: ...
    def setDateFormatter(self, dateFormatter) -> None: ...
    def getAvailableFonts(self): ...
    __accum__: Any
    def format(self): ...
    def hasForm(self, name): ...
    def getFormBBox(self, name, boxType: str = ...): ...
    def getXObjectName(self, name): ...
    def xobjDict(self, formnames): ...
    def Reference(self, obj, name: Any | None = ...): ...

PDFtrue: str
PDFfalse: str
PDFnull: str

class PDFText(PDFObject):
    t: Any
    enc: Any
    def __init__(self, t, enc: str = ...) -> None: ...
    def format(self, document): ...
    def __str__(self): ...

def PDFnumber(n): ...

_re_cleanparens: Any

def _isbalanced(s): ...
def _checkPdfdoc(utext): ...

class PDFString(PDFObject):
    unicodeEncValid: bool
    s: Any
    escape: Any
    enc: Any
    def __init__(self, s, escape: int = ..., enc: str = ...) -> None: ...
    def format(self, document): ...
    def __str__(self): ...

def PDFName(data, lo=..., hi=...): ...

class PDFDictionary(PDFObject):
    multiline: bool
    dict: Any
    def __init__(self, dict: Any | None = ...) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def __getitem__(self, a): ...
    def __contains__(self, a): ...
    def Reference(self, name, document) -> None: ...
    def format(self, document, IND: bytes = ...): ...
    def copy(self): ...
    def normalize(self) -> None: ...

class checkPDFNames:
    names: Any
    def __init__(self, *names) -> None: ...
    def __call__(self, value): ...

def checkPDFBoolean(value): ...

class CheckedPDFDictionary(PDFDictionary):
    validate: Any
    def __init__(self, dict: Any | None = ..., validate: Any | None = ...) -> None: ...
    def __setitem__(self, name, value) -> None: ...

class ViewerPreferencesPDFDictionary(CheckedPDFDictionary):
    validate: Any

class PDFStreamFilterZCompress:
    pdfname: str
    def encode(self, text): ...
    def decode(self, encoded): ...

PDFZCompress: Any

class PDFStreamFilterBase85Encode:
    pdfname: str
    def encode(self, text): ...
    def decode(self, text): ...

PDFBase85Encode: Any

class PDFStream(PDFObject):
    __RefOnly__: int
    dictionary: Any
    content: Any
    filters: Any
    def __init__(
        self,
        dictionary: Any | None = ...,
        content: Any | None = ...,
        filters: Any | None = ...,
    ) -> None: ...
    def format(self, document): ...

def teststream(content: Any | None = ...): ...

teststreamcontent: str

class PDFArray(PDFObject):
    multiline: bool
    sequence: Any
    def __init__(self, sequence) -> None: ...
    def References(self, document) -> None: ...
    def format(self, document, IND: bytes = ...): ...

class PDFArrayCompact(PDFArray):
    multiline: bool

class PDFIndirectObject(PDFObject):
    __RefOnly__: int
    name: Any
    content: Any
    def __init__(self, name, content) -> None: ...
    def format(self, document): ...

class PDFObjectReference(PDFObject):
    name: Any
    def __init__(self, name) -> None: ...
    def format(self, document): ...

class PDFFile(PDFObject):
    strings: Any
    write: Any
    offset: int
    def __init__(self, pdfVersion=...) -> None: ...
    def closeOrReset(self) -> None: ...
    def add(self, s): ...
    def format(self, document): ...

class PDFCrossReferenceSubsection(PDFObject):
    firstentrynumber: Any
    idsequence: Any
    def __init__(self, firstentrynumber, idsequence) -> None: ...
    def format(self, document): ...

class PDFCrossReferenceTable(PDFObject):
    sections: Any
    def __init__(self) -> None: ...
    def addsection(self, firstentry, ids) -> None: ...
    def format(self, document): ...

class PDFTrailer(PDFObject):
    startxref: Any
    def __init__(
        self,
        startxref,
        Size: Any | None = ...,
        Prev: Any | None = ...,
        Root: Any | None = ...,
        Info: Any | None = ...,
        ID: Any | None = ...,
        Encrypt: Any | None = ...,
    ) -> None: ...
    def format(self, document): ...

class PDFCatalog(PDFObject):
    __Comment__: str
    __RefOnly__: int
    __Defaults__: Any
    __NoDefault__: Any
    __Refs__: Any
    def format(self, document): ...
    def showOutline(self) -> None: ...
    def showFullScreen(self) -> None: ...
    PageLayout: Any
    def setPageLayout(self, layout) -> None: ...
    PageMode: Any
    def setPageMode(self, mode) -> None: ...
    def check_format(self, document) -> None: ...

class PDFPages(PDFCatalog):
    __Comment__: str
    __RefOnly__: int
    __Defaults__: Any
    __NoDefault__: Any
    __Refs__: Any
    pages: Any
    def __init__(self) -> None: ...
    def __getitem__(self, item): ...
    def addPage(self, page) -> None: ...
    Kids: Any
    Count: Any
    def check_format(self, document) -> None: ...

class PDFPage(PDFCatalog):
    __Comment__: str
    Override_default_compilation: int
    __RefOnly__: int
    __Defaults__: Any
    __NoDefault__: Any
    __Refs__: Any
    pagewidth: int
    pageheight: int
    stream: Any
    hasImages: int
    compression: int
    XObjects: Any
    _colorsUsed: Any
    _shadingsUsed: Any
    Trans: Any
    def __init__(self) -> None: ...
    def setCompression(self, onoff) -> None: ...
    def setStream(self, code) -> None: ...
    def setPageTransition(self, tranDict) -> None: ...
    MediaBox: Any
    Annots: Any
    Contents: Any
    Resources: Any
    Parent: Any
    def check_format(self, document) -> None: ...

class DuplicatePageLabelPage(Exception): ...

class PDFPageLabels(PDFCatalog):
    __comment__: Any
    __RefOnly__: int
    __Defaults__: Any
    __NoDefault__: Any
    __Refs__: Any
    labels: Any
    def __init__(self) -> None: ...
    def addPageLabel(self, page, label) -> None: ...
    Nums: Any
    def format(self, document): ...

class PDFPageLabel(PDFCatalog):
    __Comment__: Any
    __RefOnly__: int
    __Defaults__: Any
    __NoDefault__: Any
    __convertible__: str
    ARABIC: str
    ROMAN_UPPER: str
    ROMAN_LOWER: str
    LETTERS_UPPER: str
    LETTERS_LOWER: str
    S: Any
    St: Any
    P: Any
    def __init__(
        self, style: Any | None = ..., start: Any | None = ..., prefix: Any | None = ...
    ) -> None: ...
    def __lt__(self, oth): ...

def testpage(document) -> None: ...

DUMMYOUTLINE: str

class PDFOutlines0(PDFObject):
    __Comment__: str
    text: Any
    __RefOnly__: int
    def format(self, document): ...

class OutlineEntryObject(PDFObject):
    Title: Any
    Dest: Any
    Parent: Any
    Prev: Any
    Next: Any
    First: Any
    Last: Any
    Count: Any
    def format(self, document): ...

class PDFOutlines(PDFObject):
    mydestinations: Any
    ready: Any
    counter: int
    currentlevel: int
    destinationnamestotitles: Any
    destinationstotitles: Any
    levelstack: Any
    buildtree: Any
    closedict: Any
    def __init__(self) -> None: ...
    def addOutlineEntry(
        self,
        destinationname,
        level: int = ...,
        title: Any | None = ...,
        closed: Any | None = ...,
    ) -> None: ...
    def setDestinations(self, destinationtree) -> None: ...
    def format(self, document): ...
    def setNames(self, canvas, *nametree) -> None: ...
    def setNameList(self, canvas, nametree) -> None: ...
    def translateNames(self, canvas, object): ...
    first: Any
    count: int
    def prepare(self, document, canvas) -> None: ...
    def maketree(
        self, document, destinationtree, Parent: Any | None = ..., toplevel: int = ...
    ): ...

def count(tree, closedict: Any | None = ...): ...

_default_producer: str

class PDFInfo(PDFObject):
    producer: Any
    creator: str
    title: str
    author: str
    subject: str
    keywords: str
    _dateFormatter: Any
    trapped: str
    def __init__(self) -> None: ...
    def digest(self, md5object) -> None: ...
    def format(self, document): ...
    def copy(self): ...

class Annotation(PDFObject):
    defaults: Any
    required: Any
    permitted: Any
    def cvtdict(self, d, escape: int = ...): ...
    def AnnotationDict(self, **kw): ...
    def Dict(self) -> None: ...
    def format(self, document): ...

class FreeTextAnnotation(Annotation):
    permitted: Any
    Rect: Any
    Contents: Any
    DA: Any
    otherkw: Any
    def __init__(self, Rect, Contents, DA, **kw) -> None: ...
    def Dict(self): ...

class LinkAnnotation(Annotation):
    permitted: Any
    Border: Any
    Rect: Any
    Contents: Any
    Destination: Any
    otherkw: Any
    def __init__(
        self, Rect, Contents, Destination, Border: str = ..., **kw
    ) -> None: ...
    def dummyDictString(self): ...
    def Dict(self): ...

class HighlightAnnotation(Annotation):
    permitted: Any
    Rect: Any
    Contents: Any
    otherkw: Any
    QuadPoints: Any
    Color: Any
    def __init__(self, Rect, Contents, QuadPoints, Color=..., **kw) -> None: ...
    def cvtdict(self, d, escape: int = ...): ...
    def Dict(self): ...

class TextAnnotation(HighlightAnnotation):
    permitted: Any
    def __init__(self, Rect, Contents, **kw) -> None: ...
    def Dict(self): ...

def rect_to_quad(Rect): ...

class PDFRectangle(PDFObject):
    def __init__(self, llx, lly, urx, ury) -> None: ...
    def format(self, document): ...

class PDFDate(PDFObject):
    dateFormatter: Any
    def __init__(
        self, ts: Any | None = ..., dateFormatter: Any | None = ...
    ) -> None: ...
    date: Any
    dhh: Any
    dmm: Any
    def _init(self, ts) -> None: ...
    def format(self, doc): ...

class Destination(PDFObject):
    representation: Any
    format: Any
    page: Any
    name: Any
    fmt: Any
    def __init__(self, name) -> None: ...
    def format(self, document): ...
    def xyz(self, left, top, zoom) -> None: ...
    def fit(self) -> None: ...
    def fitb(self) -> None: ...
    def fith(self, top) -> None: ...
    def fitv(self, left) -> None: ...
    def fitbh(self, top) -> None: ...
    def fitbv(self, left) -> None: ...
    def fitr(self, left, bottom, right, top) -> None: ...
    def setPage(self, page) -> None: ...

class PDFDestinationXYZ(PDFObject):
    typename: str
    page: Any
    top: Any
    zoom: Any
    left: Any
    def __init__(self, page, left, top, zoom) -> None: ...
    def format(self, document): ...

class PDFDestinationFit(PDFObject):
    typename: str
    page: Any
    def __init__(self, page) -> None: ...
    def format(self, document): ...

class PDFDestinationFitB(PDFDestinationFit):
    typename: str

class PDFDestinationFitH(PDFObject):
    typename: str
    page: Any
    top: Any
    def __init__(self, page, top) -> None: ...
    def format(self, document): ...

class PDFDestinationFitBH(PDFDestinationFitH):
    typename: str

class PDFDestinationFitV(PDFObject):
    typename: str
    page: Any
    left: Any
    def __init__(self, page, left) -> None: ...
    def format(self, document): ...

class PDFDestinationFitBV(PDFDestinationFitV):
    typename: str

class PDFDestinationFitR(PDFObject):
    typename: str
    page: Any
    left: Any
    bottom: Any
    right: Any
    top: Any
    def __init__(self, page, left, bottom, right, top) -> None: ...
    def format(self, document): ...

class PDFResourceDictionary(PDFObject):
    ProcSet: Any
    def __init__(self, **kwds) -> None: ...
    stdprocs: Any
    dict_attributes: Any
    def allProcs(self) -> None: ...
    def basicProcs(self) -> None: ...
    Font: Any
    def basicFonts(self) -> None: ...
    def setColorSpace(self, colorsUsed) -> None: ...
    def setShading(self, shadingUsed) -> None: ...
    def format(self, document): ...

class PDFType1Font(PDFObject):
    __RefOnly__: int
    name_attributes: Any
    Type: str
    Subtype: str
    local_attributes: Any
    def format(self, document): ...

class PDFTrueTypeFont(PDFType1Font):
    Subtype: str

class PDFFormXObject(PDFObject):
    XObjects: Any
    Annots: Any
    BBox: Any
    Matrix: Any
    Contents: Any
    stream: Any
    Resources: Any
    hasImages: int
    compression: int
    lowerx: Any
    lowery: Any
    upperx: Any
    uppery: Any
    def __init__(self, lowerx, lowery, upperx, uppery) -> None: ...
    def setStreamList(self, data) -> None: ...
    def BBoxList(self): ...
    def format(self, document): ...

class PDFPostScriptXObject(PDFObject):
    content: Any
    def __init__(self, content: Any | None = ...) -> None: ...
    def format(self, document): ...

_mode2CS: Any

class PDFImageXObject(PDFObject):
    name: Any
    width: int
    height: int
    bitsPerComponent: int
    colorSpace: str
    _filters: Any
    streamContent: str
    mask: Any
    def __init__(
        self, name, source: Any | None = ..., mask: Any | None = ...
    ) -> None: ...
    def loadImageFromA85(self, source): ...
    _dotrans: int
    def loadImageFromJPEG(self, imageFile): ...
    def loadImageFromRaw(self, source): ...
    _smask: Any
    def _checkTransparency(self, im) -> None: ...
    def loadImageFromSRC(self, im) -> None: ...
    def format(self, document): ...

class PDFSeparationCMYKColor:
    cmyk: Any
    def __init__(self, cmyk) -> None: ...
    def _makeFuncPS(self): ...
    def value(self): ...

class PDFFunction(PDFObject):
    defaults: Any
    required: Any
    permitted: Any
    def FunctionDict(self, **kw): ...
    def Dict(self, document) -> None: ...
    def format(self, document): ...

class PDFExponentialFunction(PDFFunction):
    defaults: Any
    required: Any
    permitted: Any
    C0: Any
    C1: Any
    N: Any
    otherkw: Any
    def __init__(self, C0, C1, N, **kw) -> None: ...
    def Dict(self, document): ...

class PDFStitchingFunction(PDFFunction):
    required: Any
    permitted: Any
    Functions: Any
    Bounds: Any
    Encode: Any
    otherkw: Any
    def __init__(self, Functions, Bounds, Encode, **kw) -> None: ...
    def Dict(self, document): ...

class PDFShading(PDFObject):
    required: Any
    permitted: Any
    def ShadingDict(self, **kw): ...
    def Dict(self, document) -> None: ...
    def format(self, document): ...

class PDFFunctionShading(PDFShading):
    required: Any
    permitted: Any
    Function: Any
    ColorSpace: Any
    otherkw: Any
    def __init__(self, Function, ColorSpace, **kw) -> None: ...
    def Dict(self, document): ...

class PDFAxialShading(PDFShading):
    required: Any
    permitted: Any
    Coords: Any
    Function: Any
    ColorSpace: Any
    otherkw: Any
    def __init__(self, x0, y0, x1, y1, Function, ColorSpace, **kw) -> None: ...
    def Dict(self, document): ...

class PDFRadialShading(PDFShading):
    required: Any
    permitted: Any
    Coords: Any
    Function: Any
    ColorSpace: Any
    otherkw: Any
    def __init__(self, x0, y0, r0, x1, y1, r1, Function, ColorSpace, **kw) -> None: ...
    def Dict(self, document): ...
