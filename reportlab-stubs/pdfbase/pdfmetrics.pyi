from typing import Any

from reportlab.lib.logger import warnOnce as warnOnce
from reportlab.lib.rl_accel import instanceStringWidthT1 as instanceStringWidthT1
from reportlab.lib.rl_accel import unicode2T1 as unicode2T1
from reportlab.lib.utils import findInPaths as findInPaths
from reportlab.lib.utils import isSeq as isSeq
from reportlab.lib.utils import isStr as isStr
from reportlab.lib.utils import open_and_read as open_and_read
from reportlab.lib.utils import open_and_readlines as open_and_readlines
from reportlab.lib.utils import rl_glob as rl_glob
from reportlab.lib.utils import rl_isdir as rl_isdir
from reportlab.lib.utils import rl_isfile as rl_isfile
from reportlab.pdfbase import _fontdata as _fontdata
from reportlab.pdfbase import rl_codecs as rl_codecs
from reportlab.rl_config import T1SearchPath as T1SearchPath
from reportlab.rl_config import defaultEncoding as defaultEncoding
from reportlab.rl_config import register_reset as register_reset

__version__: str
__doc__: str
_notdefChar: bytes
standardFonts: Any
standardEncodings: Any
_typefaces: Any
_encodings: Any
_fonts: Any
_dynFaceNames: Any

class FontError(Exception): ...
class FontNotFoundError(Exception): ...

def parseAFMFile(afmFileName): ...

class TypeFace:
    name: Any
    glyphNames: Any
    glyphWidths: Any
    ascent: int
    descent: int
    familyName: Any
    bold: int
    italic: int
    requiredEncoding: str
    builtIn: int
    def __init__(self, name) -> None: ...
    def _loadBuiltInData(self, name) -> None: ...
    def getFontFiles(self): ...
    def findT1File(self, ext: str = ...): ...

def bruteForceSearchForFile(fn, searchPath: Any | None = ...): ...
def bruteForceSearchForAFM(faceName): ...

class Encoding:
    name: Any
    frozen: int
    baseEncodingName: Any
    vector: Any
    def __init__(self, name, base: Any | None = ...) -> None: ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, value) -> None: ...
    def freeze(self) -> None: ...
    def isEqual(self, other): ...
    def modifyRange(self, base, newNames) -> None: ...
    def getDifferences(self, otherEnc): ...
    def makePDFObject(self): ...

standardT1SubstitutionFonts: Any

class Font:
    _multiByte: int
    _dynamicFont: int
    fontName: Any
    encoding: Any
    encName: Any
    substitutionFonts: Any
    _notdefChar: Any
    _notdefFont: Any
    def __init__(
        self, name, faceName, encName, substitutionFonts: Any | None = ...
    ) -> None: ...
    def stringWidth(self, text, size, encoding: str = ...): ...
    def __repr__(self): ...
    widths: Any
    def _calcWidths(self) -> None: ...
    def _formatWidths(self): ...
    def addObjects(self, doc) -> None: ...

PFB_MARKER: Any
PFB_ASCII: Any
PFB_BINARY: Any
PFB_EOF: Any

def _pfbCheck(p, d, m, fn): ...

_postScriptNames2Unicode: Any

class EmbeddedType1Face(TypeFace):
    afmFileName: Any
    pfbFileName: Any
    requiredEncoding: Any
    def __init__(self, afmFileName, pfbFileName) -> None: ...
    def getFontFiles(self): ...
    _binaryData: Any
    _length: Any
    _length1: Any
    _length2: Any
    _length3: Any
    def _loadGlyphs(self, pfbFileName) -> None: ...
    name: Any
    familyName: Any
    ascent: Any
    descent: Any
    capHeight: Any
    italicAngle: Any
    stemV: Any
    xHeight: Any
    bbox: Any
    glyphWidths: Any
    glyphNames: Any
    def _loadMetrics(self, afmFileName) -> None: ...
    def addObjects(self, doc): ...

def registerTypeFace(face) -> None: ...
def registerEncoding(enc) -> None: ...
def registerFontFamily(
    family,
    normal: Any | None = ...,
    bold: Any | None = ...,
    italic: Any | None = ...,
    boldItalic: Any | None = ...,
) -> None: ...
def registerFont(font) -> None: ...
def getTypeFace(faceName): ...
def getEncoding(encName): ...
def findFontAndRegister(fontName): ...
def getFont(fontName): ...

_notdefFont: Any

def getAscentDescent(fontName, fontSize: Any | None = ...): ...
def getAscent(fontName, fontSize: Any | None = ...): ...
def getDescent(fontName, fontSize: Any | None = ...): ...
def getRegisteredFontNames(): ...
def stringWidth(text, fontName, fontSize, encoding: str = ...): ...
def dumpFontData() -> None: ...
def test3widths(texts) -> None: ...
def testStringWidthAlgorithms() -> None: ...
def test() -> None: ...
def _reset(initial_dicts=...) -> None: ...
